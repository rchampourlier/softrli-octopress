<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: database | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-07-21T18:04:49+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup automatic clearing of your Rails sessions]]></title>
    <link href="http://www.softr.li/blog/2012/07/05/setup-automatic-clearing-of-your-rails-sessions/"/>
    <updated>2012-07-05T09:40:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/05/setup-automatic-clearing-of-your-rails-sessions</id>
    <content type="html"><![CDATA[<p>With every connection to your application of a new user, bot or whatever, Rails will create a new session object.</p>

<p>If you're using <a href="http://api.rubyonrails.org/classes/ActiveRecord/SessionStore.html">ActiveRecord::SessionStore</a> to save your sessions in your database, your database may already be alarmingly growing in size, due to the number of sessions it contains.</p>

<h2>The rake db:sessions:clear task</h2>

<p>If you don't mind a lot about your users loosing their session, you can simply use the provided <code>rake db:sessions:clear</code> task. It will simply delete all sessions in the database. Side-effect: all current sessions are deleted, so signed in users get signed out, and you should hope they had nothing under way!</p>

<h2>A more user-friendly solution</h2>

<p>Writing a simple rake task to replace the default one and only remove sessions older than 2 weeks is as easy as adding this file to your project:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/tasks/sessions.rake  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:sessions</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  desc &quot;Clear expired sessions (more than 2 weeks old)&quot;</span>
</span><span class='line'><span class="sr">  task :cleanup =&gt; :environment do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;DELETE FROM sessions WHERE (updated_at &amp;lt; &#39;</span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="si">}</span><span class="s2">&#39;)&quot;</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, if you run <code>rake sessions:cleanup</code>, only the older sessions will be removed from your database.</p>

<h2>Last but not least: automation</h2>

<p>So that you don't have to run it every day, you can setup a cron task to do it for you. Here is the line we use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>crontab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>m h  dom mon dow   command&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>01 3 * * * bash -l -c 'cd /home/deployer/rails/project/current; bundle exec rake sessions:cleanup'</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>References</h2>

<ul>
<li><a href="http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions">http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef recipe to install a PostgreSQL server on a machine configured with en_US locales]]></title>
    <link href="http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales/"/>
    <updated>2012-05-22T00:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales</id>
    <content type="html"><![CDATA[<p>If you have tried to install a PostgreSQL server on a Vagrant box and you're not an english-native, you may have faced an UTF8 issue:</p>

<p><code>
CREATE DATABASE db_mydb OWNER my_user ENCODING 'UTF8' TEMPLATE template1;
createdb: database creation failed: ERROR:  encoding UTF8 does not match locale en_US
DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1
</code></p>

<p>This is due to your Vagrant base box being configured with <code>en_US</code> locales. When the PostgreSQL server is installed, it is configured according to these locales, and gets an <code>en_US</code> config which is not compatible with <code>UTF8</code> encoding databases.</p>

<!-- more -->


<p>Manually, you would change your server's locales before running the PostgreSQL installation.</p>

<p>To do this using Chef, this will take you 2 additional steps.</p>

<h3>1. Configure the machine's locales permanently</h3>

<p>An approach which worked for me is to add a <code>/etc/profile.d/lang.sh</code> file which will configure your shell with the appropriate locale-related environment variables. Here is the template script:</p>

<p><code>bash lang.sh
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
</code></p>

<p>Once this is done, you need to run some commands on the server to prepare the locale files:</p>

<p><code>
locale-gen en_US.UTF-8
dpkg-reconfigure locales
</code></p>

<p>I've build a small cookbook as part of my <a href="https://github.com/rchampourlier/vagrant-stacks">vagrant-stacks</a> repo, you can find it <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/set_locale">there</a>.</p>

<h3>2. Install the PostgreSQL server with the appropriate environment variables</h3>

<p>After running the locale configuration from your Chef recipe, you may want to continue with the PostgreSQL install. However, even if we've added the <code>lang.sh</code> initialization script, it hadn't the chance to be loaded yet. So the required environment variables are not set yet.</p>

<p>To ensure these environment variables get loaded when we run our <code>postgresql::server</code> recipe, we will encapsulate this call in a small recipe:</p>

<p><code>ruby
ENV['LANGUAGE'] = ENV['LANG'] = ENV['LC_ALL'] = "en_US.UTF-8"
include_recipe "postgresql::server"
</code></p>

<p>You can find this mini-recipe <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/postgresql_server_utf8">here</a> again in my vagrant-stacks repo!</p>

<p><strong>That should be all!</strong></p>

<p><em>If I forgot some step or you can't manage to get this working, do not hesitate to write a comment. I'll do my best to answer!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB CheatSheet]]></title>
    <link href="http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet/"/>
    <updated>2012-04-15T10:05:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet</id>
    <content type="html"><![CDATA[<p>Another cheatsheet, for <strong>useful MongoDB commands</strong> to use inside the <code>mongo</code> command-line tool.</p>

<!-- more -->


<h2>Get a list of handy commands</h2>

<pre><code>help
</code></pre>

<h2>List DBs</h2>

<pre><code>show dbs
</code></pre>

<h2>Select a DB</h2>

<pre><code>use mydb
</code></pre>

<h2>Show collections</h2>

<pre><code>show collections
</code></pre>

<h2>List all documents in a collection</h2>

<pre><code>db.collectionName.find()
</code></pre>

<h2>Get a specific object in a collection</h2>

<h3>Through its index</h3>

<pre><code>var object = db.collectionName.find().toArray()[index];
</code></pre>

<h3>With a where-like clause</h3>

<p>Assuming you want to find objects matching x=1 and y=2:</p>

<pre><code>var objects = db.collectionName.find((x:1), (y:2));
</code></pre>

<h2>Update an object</h2>

<pre><code>var object.attribute = newValue;
db.collectionName.save(object);
</code></pre>
]]></content>
  </entry>
  
</feed>
