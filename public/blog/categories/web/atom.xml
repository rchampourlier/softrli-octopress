<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-11-08T12:17:51+01:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capybara using Selenium, with RSpec, in the Vagrant (remotely)]]></title>
    <link href="http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely/"/>
    <updated>2012-11-08T12:00:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely</id>
    <content type="html"><![CDATA[<h3>Let's assume:</h3>

<ul>
<li>you're using RSpec for your tests,</li>
<li>you use Capybara for your integration/acceptance specs,</li>
<li>you run your tests in a Vagrant box.</li>
</ul>


<p>Let's also say everything is working fine (I won't deal with any issue you may have before this point).</p>

<p>Now, <strong>you have some features / user stories / whatever that requires some Javascript action</strong>.</p>

<h3>Well.</h3>

<p><strong>If you weren't using Vagrant</strong>, I'd say everything should go fine too. Just append <code>:js =&gt; true</code> to your RSpec example, it will use Selenium and everything will go fine using your installed Firefox binary.</p>

<p>But <strong>you're testing in a Vagrant box</strong>. So here's what you'll get:</p>

<p>```
Failure/Error: visit "/whatever"</p>

<pre><code> Selenium::WebDriver::Error::WebDriverError:
   Could not find Firefox binary (os=linux). Make sure Firefox is installed or set the path manually with Selenium::WebDriver::Firefox::Binary.path=
</code></pre>

<p>```</p>

<h3>So you may say, fine, let's install Firefox!</h3>

<p>But... your Vagrant box is meant to be <strong>used in headless mode</strong>, and Firefox requires something to draw on. Still, you may have it to work. But I'll assume (again) that <strong>you don't want to bother with setting things for the client-side of the test on the development/test box</strong> (which is more server-side) <strong>, and use everything that's already on you real development machine</strong> (your day-to-day browsers).</p>

<p><em>If my assumption is false, you can have a look to <a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">this article</a>, which explains both approaches (but not for RSpec, that's the why of this article).</em></p>

<h3>The solution? selenium server!</h3>

<p>What you want is Capybara to use its selenium driver, but <strong>instead of running a local copy of the browser</strong>, use <a href="http://seleniumhq.org/download/">selenium server</a> which will <strong>allows Capybara to use browsers running in your real development machine</strong> (the host of your Vagrant development box).</p>

<h3>Ok I got it, how do I do it?</h3>

<p><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">This article</a> is pretty well made, with far more explanations that I provide, so I encourage you to have a look to fully understand how it works. However, <strong>it doesn't provide the solution if you're using RSpec</strong>, since it builds a simple <code>Unit::TestCase</code> example.</p>

<p><strong>This is where I truly do something.</strong></p>

<h3>Here's how to get it working with RSpec (and even in Spork)</h3>

<p>Add this one line in your <code>spec_helper.rb</code> file (one line?!!!):</p>

<p><code>
  require_relative 'support/capybara_remote'
</code></p>

<p>After the <code>require 'capybara/rspec'</code> would be great. If you're using Spork, it should be in the <code>prefork</code> block.</p>

<p>Well, not truly a one-liner. Add this to a <code>spec/support/capybara_remote.rb</code> file too:</p>

<p><div><script src='https://gist.github.com/4038197.js?file='></script>
<noscript><pre><code># SELENIUM_SERVER is the IP address or hostname of the system running Selenium
# Server, this is used to determine where to connect to when using one of the
# selenium_remote_* drivers
SELENIUM_SERVER = &quot;10.10.11.1&quot;

# SELENIUM_APP_HOST is the IP address or hostname of this system (where the
# tests run against) as reachable for the SELENIUM_SERVER. This is used to set
# the Capybara.app_host when using one of the selenium_remote_* drivers
SELENIUM_APP_HOST = &quot;10.10.11.2&quot;

# CAPYBARA_DRIVER is the Capybara driver to use, this defaults to Selenium with
# Firefox
CAPYBARA_DRIVER = &quot;selenium_remote_firefox&quot;

# At this point, Capybara.default_driver is :rack_test, and
# Capybara.javascript_driver is :selenium. We can't run :selenium in the Vagrant box,
# so we set the javascript driver to :selenium_remote_firefox which we're going to
# configure.
Capybara.javascript_driver = :selenium_remote_firefox

RSpec.configure do |config|

  config.before(:each) do
    if selenium_remote?
      Capybara.app_host = &quot;http://#{SELENIUM_APP_HOST}:#{page.driver.rack_server.port}&quot;
    end
  end

  config.after(:each) do
    Capybara.reset_sessions!
    Capybara.use_default_driver
    Capybara.app_host = nil
  end

  # Determines if a selenium_remote_* driver is being used
  def selenium_remote?
    !(Capybara.current_driver.to_s =~ /\Aselenium_remote/).nil?
  end
end

# Set the default driver to CAPYBARA_DRIVER, when you change the driver in one
# of your tests resetting it to the default will ensure that its reset to what
# you specified when starting the tests.
#Capybara.default_driver = CAPYBARA_DRIVER.to_sym

# CapybaraDriverRegistrar is a helper class that enables you to easily register
# Capybara drivers
class CapybaraDriverRegistrar

  # register a Selenium driver for the given browser to run on the localhost
  def self.register_selenium_local_driver(browser)
    Capybara.register_driver &quot;selenium_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: browser)
    end
  end

  # register a Selenium driver for the given browser to run with a Selenium
  # Server on another host
  def self.register_selenium_remote_driver(browser)
    Capybara.register_driver &quot;selenium_remote_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: :remote, url: &quot;http://#{SELENIUM_SERVER}:4444/wd/hub&quot;, desired_capabilities: browser)
    end
  end
end

# Register various Selenium drivers
CapybaraDriverRegistrar.register_selenium_remote_driver(:firefox)</code></pre></noscript></div>
</p>

<p>Be sure to adjust the constants (<code>SELENIUM_SERVER</code>, <code>SELENIUM_APP_HOST</code>, <code>CAPYBARA_DRIVER</code>) to match your configuration (as explained in the comments).</p>

<p>Now, get the selenium server <code>.jar</code> and run it on your real machine (the host of your Vagrant) with this command:</p>

<p><code>
java -jar selenium-server-standalone-2.25.0.jar
</code></p>

<p>Now, any RSpec example with the <code>:js =&gt; true</code> metadata should be running in your Firefox browser on your real machine, where you can see it!</p>

<h3>Wrapping up</h3>

<p>We've seen how to use <strong>selenium server</strong> to allow <strong>Capybara</strong> running in a <strong>Vagrant box</strong> to use the host's <strong>browsers</strong> to run <strong>RSpec</strong> specs requiring <strong>Javascript</strong>.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">the main source for my custom configuration</a></li>
<li><a href="http://jeffkreeftmeijer.com/2011/capybara-ate-swinger/">more on how capybara allows to select a driver from the examples in RSpec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cropping with live preview in Rails, using Jcrop]]></title>
    <link href="http://www.softr.li/blog/2012/10/19/image-cropping-with-live-preview-in-rails/"/>
    <updated>2012-10-19T11:50:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/10/19/image-cropping-with-live-preview-in-rails</id>
    <content type="html"><![CDATA[<p>Well, thanks to the <a href="http://railscasts.com/episodes/182-cropping-images">Jcrop Railscast</a>, I had setup <strong>avatar upload and cropping features</strong> on <a href="http://www.avdice.com">our project</a>.</p>

<p>With the major changes coming in our next release, this little feature <strong>wasn't working anymore</strong>, and I couldn't figure why my preview was working like a mess...</p>

<p>I looked into the code, which matches the <a href="http://deepliquid.com/projects/Jcrop/demos.php?demo=thumbnail">Jcrop's original example</a>, but I couldn't figure what was wrong! Wow, but that's a pretty simple thing, no? Just scaling and offsetting a picture, shouldn't take long to understand?!</p>

<p>Well, the code wasn't looking good enough. I'm undertaking <a href="https://www.edx.org/courses/BerkeleyX/CS169.1x/2012_Fall/about">edX SAAS course</a> so I want my code to be <em>beautiful</em>. So, let's rewrite it!</p>

<h3>The context</h3>

<ul>
<li>I want a <strong>simple cropping feature</strong>, using Paperclip just like the one setup in the Railscast, and the <strong>live preview</strong>.</li>
<li>I just need to crop to a <strong>square picture</strong>.</li>
<li>I want it to work!</li>
</ul>


<p>I won't rewrite the whole tutorial, since the Railscast is perfect to setup your model with Paperclip, add the cropper module, but the Javascript with preview was a wreck, and that's what I rewrote.</p>

<h3>The Javascript</h3>

<p>```
:javascript</p>

<p>  var previewSize = 150;
  var originalSize = {</p>

<pre><code>width: #{@user.avatar_geometry(:original).width},
height: #{@user.avatar_geometry(:original).height}
</code></pre>

<p>  };</p>

<p>  function updatePreview(coords) {</p>

<pre><code>var ratio = previewSize / coords.w;

$('#preview').css({
  width: Math.round(originalSize.width * ratio) + 'px',  
  height: Math.round(originalSize.height * ratio) + 'px',  
  marginLeft: '-' + Math.round(coords.x * ratio) + 'px',  
  marginTop: '-' + Math.round(coords.y * ratio) + 'px'  
});

$('#profile_crop_x').val(Math.floor(coords.x));  
$('#profile_crop_y').val(Math.floor(coords.y));  
$('#profile_crop_w').val(Math.floor(coords.w));  
$('#profile_crop_h').val(Math.floor(coords.h));    
</code></pre>

<p>  };</p>

<p>  $(function() {</p>

<pre><code>$('#cropbox').Jcrop({
  onChange: updatePreview,  
  onSelect: updatePreview,  
  setSelect: [0, 0, originalSize.width * 0.9, originalSize.height * 0.9],  
  aspectRatio: 1
});
</code></pre>

<p>  });
```</p>

<p>I think this version makes more sense, and in my case it works perfectly. I used some drawings to help me rewriting this, so you may find it helpful, in particular if you want something to start with if you don't just want a square target size!</p>

<p><img src="https://s3-eu-west-1.amazonaws.com/softrli/assets/2012-10-19-image-cropping-with-live-preview-in-rails-asset-1.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build your very own icon font]]></title>
    <link href="http://www.softr.li/blog/2012/08/08/softrli-build-own-icon-font/"/>
    <updated>2012-08-08T22:50:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/08/08/softrli-build-own-icon-font</id>
    <content type="html"><![CDATA[<p>I intend to give you <strong>the fastest road to your own icon font</strong>. How fast?</p>

<ol>
<li>You find SVG files of the icons you want in your set. Except giving you some sources to find them (which I do), I'm afraid I can't save you this step.</li>
<li>Use the magic of <a href="http://keyamoon.com/icomoon/app">IcoMoon</a>, an HTML5 application brought to you by Keyamoon, to <strong>package all these icons in a set of fonts, CSS and JS</strong>. Once this is done, you're ready to use your brand new custom icon font!</li>
<li>That's true, no step 3!</li>
</ol>


<!-- more -->


<h3>Introduction</h3>

<p>There are plenty of reasons of using a custom icon font instead of sprites, if you're still not convinced, you can do a web search, but:</p>

<ul>
<li>it's <strong>easier to build</strong> with the tip I give you here,</li>
<li>it's <strong>vector</strong>, so you can get your icons at <strong>whatever-size-you-want</strong>,</li>
<li>it's <strong>less data and requests</strong> for your users (one font file for any size, any color, and it can be embedded in the CSS),</li>
<li>many more...</li>
</ul>


<p>There are <strong>plenty of icon sets available</strong> as fonts for free on the web, even apps allowing you to build custom sets from a selection of icons. However, you may have some icons on your own, and making your custom set is often the key to an homogeneous design. Here are some sources I've found:</p>

<object width="560" height="420" id="pt-embed-4167394-658-object" type="application/x-shockwave-flash" data="http://cdn.pearltrees.com/s/embed/getApp"><param name="flashvars" value="lang=fr_FR&amp;embedId=pt-embed-4167394-658&amp;treeId=4167394&amp;pearlId=33352719&amp;treeTitle=icons&amp;site=www.pearltrees.com%2F" /><param name="movie" value="http://cdn.pearltrees.com/s/embed/getApp" /><param name="wmode" value="opaque" /><param name="allowscriptaccess" value="always" /><a href="http://www.pearltrees.com/rchampourlier/icons/id4167394" alt="icons" style="text-decoration:underline;"><span style="font-size:14pt;color:black;font-weight:bold">icons</span><span style="font-size:10pt;color:#999999;font-weight:normal"> et icons font/set composers / misc dans dev / Romain Champourlier (rchampourlier)</span></a></object>


<p><strong>Now let's get started!</strong></p>

<h3>Get some SVG files for your icons</h3>

<p>First you need a <strong>good set of SVG files</strong>. You can find them on the web (in the sources above for example), or build them yourself.</p>

<p>Other options may work well too, but to be sure your font looks good, you should ensure:</p>

<ul>
<li>all SVG files have the same size (I use 512x512pt),</li>
<li>the path is merged,</li>
<li>the icon is centered horizontally (I'm not quite sure what the best option for vertical alignment is, I centered and I'm fine).</li>
</ul>


<p><em>(To edit these files you can use Inkscape with is opensource.)</em></p>

<h3>IcoMoon, the magical HTML5 app for your custom icon fonts needs</h3>

<p>Well, just go <a href="http://keyamoon.com/icomoon/app">there</a>. The application is <strong>easy to use, reliable, well designed</strong>. It's HTML5 and you can even download a JSON file to save your config. You can thus build several sets of fonts, reload them later. You can even reload a generated font to edit it. This app is <strong>awesome</strong>!</p>

<p>Once you've uploaded your set of icons or chosen some from the available sets, you select the ones you want in your font and click the "Font" button.</p>

<p><img src="/images/2012-08-08-screenshot1.png"></p>

<p>The last step before downloading the font is to set some options. I mostly went with the defaults, except for the "Reset Encoding". I'm using "Private Use Area", so that if the font can't be load the icons don't get replaced by random characters.</p>

<p><img src="/images/2012-08-08-screenshot2.png"></p>

<p>Finally, I set a name for my font and I use the Base64 and CSS embedding option. As such, my font is already available in the generated CSS so it makes even 1 request less for the users' browsers!</p>

<p><img src="/images/2012-08-08-screenshot3.png"></p>

<p>Now is the download time!</p>

<p>You're getting the fonts, the CSS file providing you with the styles to use your icons. The styles are automatically based on the name of your icon files. You also get a <code>JS</code> file to help Internet Explorer 6 &amp; 7 with these icon fonts. Finally, an <code>index.html</code> file you can use to <strong>browse your icons</strong>, along with the CSS classes!</p>

<p><img src="/images/2012-08-08-screenshot4.png"></p>

<p>So, wasn't it fast? Don't hesitate to share if you know a fastest way!</p>
]]></content>
  </entry>
  
</feed>
