<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gemset | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/gemset/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-05-08T12:59:10+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving from RVM to rbenv]]></title>
    <link href="http://www.softr.li/blog/2012/04/10/moving-from-rvm-to-rbenv/"/>
    <updated>2012-04-10T09:56:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/10/moving-from-rvm-to-rbenv</id>
    <content type="html"><![CDATA[<ul>
<li>Using <strong>rvm</strong> to manage your gemset without really knowing why since now Bundler does it very cleverly?</li>
<li>Feeling that the whole rvm system is a bit complicated?</li>
<li>Tired of having shell scripts not finding your rvm-managed gems?</li>
</ul>


<p>It looks like your ready to consider <strong>rbenv</strong>, which is a really lightweight alternative to <strong>rvm</strong>. Lightweight because it <em>just</em> manages rubies, and lets Bundler manage the gems.</p>

<!-- more -->


<h2>Why?</h2>

<p><strong>RVM</strong> is a very useful tool that helps you manage your ruby environment when you need multiple rubies and have tons of gems different for each of your projects.</p>

<p>I used <strong>RVM</strong> a long time on my development machine, however I did not bother to keep it on my production environment. Launching ruby applications through other ruby tools (e.g. God) or <code>crontab</code> was causing me headaches (loading RVM path, bundle not found, etc.). Since the gems were not managed by RVM, thanks to the excellent <a href="http://gembundler.com/">Bundler</a>, it was a lot of pain for a poor service.</p>

<p>On the other hand, <strong>rbenv</strong> is really simple and powerful, but it only manages rubies, not gems. But again, we have <strong>Bundler</strong>, so it's all that we need.</p>

<p>I will not say that using <strong>rbenv</strong> on a production server is painless, you still have to do some work to load some rbenv-things in your environment, but it's a lot more clear and easy than with <strong>RVM</strong>...</p>

<h2>Uninstall RVM</h2>

<p>Start with the RVM auto-uninstall command:</p>

<pre><code>rvm implode
</code></pre>

<p>Check your filesystem for other <code>rvm</code> files which may remain: <code>.rvmrc</code> files, maybe <code>/etc/rvmrc</code>. Use <code>find / -name 'rvm' -print</code> or <code>locate rvm</code> for example.</p>

<h2>Install rbenv with ruby-build plugin</h2>

<p>Install <strong>rbenv</strong> by following <a href="https://github.com/sstephenson/rbenv#section_2.1">the project's installation tutorial using GitHub checkout</a>. <strong>Read the following before doing the install!</strong></p>

<p>Be sure to adjust the file to which you append your environments changes (steps 2 and 3) to the one your using on your system (<code>.bash_profile</code> in the tutorial, <code>.profile</code> on my Mac system, but you may have <code>.bashrc</code> too).</p>

<p><strong>Stop at the end of step 3</strong>, <strong>restart your term</strong> (close and reopen, sure to work while step 4 <code>exec $SHELL</code> did nothing for me) and do the following to have a simple way of installing rubies:</p>

<pre><code>$ mkdir -p ~/.rbenv/plugins
$ cd ~/.rbenv/plugins
$ git clone git://github.com/sstephenson/ruby-build.git
</code></pre>

<p>If you've done this after step 4, you can just use this command to install the ruby you need, e.g. <code>1.9.2-p290</code>:</p>

<pre><code>rbenv install 1.9.2-p290
</code></pre>

<p>Don't forget to do step 6, <code>rbenv rehash</code>.</p>

<h2>Define rbenv's default ruby</h2>

<p>Create the <code>~/.rbenv/default</code> file with the following content, adjusted to your desired ruby:</p>

<pre><code>ruby-1.9.2-p290
</code></pre>

<h2>Configure Bundler to manage gemsets</h2>

<p>As a replacement to <strong>RVM</strong>'s gemsets feature, we will use <strong>Bundler</strong>. We will thus ask it to systematically install the gems inside the project's <code>vendor/bundle</code> directory, instead of using the system's default path.</p>

<p>To do this, create the <code>~/.bundle/config</code> file and add this content:</p>

<pre><code>---
   BUNDLE_PATH: vendor/bundle
</code></pre>

<p>You can check the configuration is OK by <code>cd</code>-ing into one of your projects' directory (assuming it's using <strong>Bundle</strong> and so you have a <strong>Gemfile</strong>), and running <code>bundle config</code>. If the configuration is OK, you should have this showed:</p>

<pre><code>path
  Set for the current user (/Users/&lt;your_name&gt;/.bundle/config): "vendor/bundle"
</code></pre>

<h2>Using (and aliasing) bundle exec</h2>

<p>Using Bundler to manage your gemsets will now require you to use <code>bundle exec</code> for <strong>every</strong> ruby command you run, even <code>rails server</code> or <code>rails console</code> (they don't need <code>bundle exec</code> to load Bundle, however you need Bundler to find them!).</p>

<p>A nice thing to do is to alias the <code>bundle exec</code> command to something shorter. I use <code>be</code>. Add this to your <code>~/.bash_profile</code>, <code>~/.profile</code> or whatever file you use:</p>

<pre><code>alias be='bundle exec'
</code></pre>

<p>So now you can run: <code>be rails console</code> instead of <code>bundle exec rails console</code>.</p>

<h2>The end</h2>

<p>That's it, you're done!</p>

<h2>References / credits</h2>

<p>This walkthrough is based on <a href="http://snippets.aktagon.com/snippets/532-How-to-migrate-from-rvm-to-rbenv">this article</a> I used a lot myself, but I finally rewrote it to include some more details on the <strong>rbenv</strong> installation process.</p>

<h2>Hubticle tags</h2>

<p>ruby, RVM, rbenv, gem, gemset, development, environment, bundle</p>
]]></content>
  </entry>
  
</feed>
