<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-06-20T12:43:41+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Which HTML5 Canvas Javascript library should I use?]]></title>
    <link href="http://www.softr.li/blog/2012/06/20/which-html5-canvas-javascript-library-should-i-use/"/>
    <updated>2012-06-20T12:35:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/20/which-html5-canvas-javascript-library-should-i-use</id>
    <content type="html"><![CDATA[<p>I'm looking for an HTML5 Canvas library which I could use to build an interactive and animated UI control. So my requirements are essentially:</p>

<ul>
<li>well <strong>documented</strong>, <strong>supported</strong> and <strong>maintained</strong> library, because I want to be able to reuse it in later projects,</li>
<li>easing the process of creating <strong>complex graphical objects</strong> (my control is going to be quite complex, a lot more than a simple button), if possible supporting groups and layers,</li>
<li>helping me with the handling of <strong>user interactions</strong>,</li>
<li>supporting <strong>touch devices</strong>,</li>
<li>providing tools for <strong>animating</strong> the graphical content.</li>
</ul>


<p>I've searched for the appropriate library, so I will share with you the results of my search. After a list of most of the available libraries, I investigated the following shortlist of libraries: <strong>EaselJS</strong>, <strong>fabric.js</strong>, <strong>Paper.js</strong>, <strong>processing.js</strong> and <strong>Kinetic.js</strong>. I hope this can help you with your own choice!</p>

<!-- more -->


<h3>Found libraries</h3>

<p>Here is the list of what seems to be the main still-maintained Canvas libraries.</p>

<ul>
<li><a href="https://github.com/hyperandroid/CAAT">CAAT</a></li>
<li><a href="http://www.createjs.com/#!/EaselJS">EaselJS</a></li>
<li><a href="http://fabricjs.com/">Fabric.js</a></li>
<li><a href="http://guryjs.org/">Gury</a></li>
<li><a href="http://jcscript.com/">JcanvaScript</a></li>
<li><a href="http://www.kineticjs.com/">Kinetic.js</a></li>
<li><a href="http://ocanvas.org/">oCanvas</a></li>
<li><a href="http://paperjs.org/">Paper.js</a></li>
<li><a href="http://processingjs.org/">processing.js</a></li>
</ul>


<p>Here are some other libraries I have not investigated, either because they weren't on Github or seemed abandoned:</p>

<ul>
<li><a href="http://code.google.com/p/cakejs/">cakejs</a></li>
<li><a href="https://github.com/lamberta/doodle-js">Doodle-js</a></li>
<li><a href="https://canvastoolkit.codeplex.com/">CanvasToolkit</a></li>
<li><a href="http://mootools.net/forge/p/mootools_canvas_lib">Mootools Canvas lib</a></li>
</ul>


<h3>The Github comparison</h3>

<table>
<thead>
<tr>
<th>Library       </th>
<th> Watch </th>
<th> Fork </th>
<th> Issues</th>
</tr>
</thead>
<tbody>
<tr>
<td>CAAT          </td>
<td> 336   </td>
<td> 42   </td>
<td> 17</td>
</tr>
<tr>
<td>EaselJS       </td>
<td> 1,440 </td>
<td> 203  </td>
<td> 90    </td>
</tr>
<tr>
<td>fabric.js     </td>
<td> 1,059 </td>
<td> 101  </td>
<td> 38    </td>
</tr>
<tr>
<td>gury          </td>
<td> 348   </td>
<td> 19   </td>
<td> 9     </td>
</tr>
<tr>
<td>jCanvaScript  </td>
<td> 80    </td>
<td> 5    </td>
<td> 2     </td>
</tr>
<tr>
<td>Kinetic.js    </td>
<td> 267   </td>
<td> 41   </td>
<td> 7    </td>
</tr>
<tr>
<td>oCanvas       </td>
<td> 194   </td>
<td> 20   </td>
<td> 6 </td>
</tr>
<tr>
<td>Paper.js      </td>
<td> 1,706 </td>
<td> 111  </td>
<td> 30</td>
</tr>
<tr>
<td>processing.js </td>
<td> 1,276 </td>
<td> 206  </td>
<td> N/A</td>
</tr>
</tbody>
</table>


<h3>The minified size comparison</h3>

<table>
<thead>
<tr>
<th>Library       </th>
<th> Size (kb)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CAAT          </td>
<td> 210</td>
</tr>
<tr>
<td>EaselJS       </td>
<td> 44</td>
</tr>
<tr>
<td>fabric.js     </td>
<td> 133</td>
</tr>
<tr>
<td>gury          </td>
<td> 11</td>
</tr>
<tr>
<td>Kinetic.js    </td>
<td> 53</td>
</tr>
<tr>
<td>oCanvas       </td>
<td> 18</td>
</tr>
</tbody>
</table>


<p><em>No minified version was available in the Github repo for jCanvaScript, Paper.js and processing.js.</em></p>

<h3>The Stackoverflow comparison</h3>

<table>
<thead>
<tr>
<th>Search text   </th>
<th> Tag           </th>
<th> # tagged questions </th>
<th> # search questions</th>
</tr>
</thead>
<tbody>
<tr>
<td>CAAT          </td>
<td> N/A           </td>
<td> N/A                </td>
<td> 5</td>
</tr>
<tr>
<td>EaselJS       </td>
<td> easeljs       </td>
<td> 30                 </td>
<td> 79</td>
</tr>
<tr>
<td>fabric.js     </td>
<td> fabricjs      </td>
<td> 43                 </td>
<td> 78</td>
</tr>
<tr>
<td>jCanvaScript  </td>
<td> N/A           </td>
<td> N/A                </td>
<td> 6</td>
</tr>
<tr>
<td>Kinetic.js    </td>
<td> kineticjs     </td>
<td> 74                 </td>
<td> 30</td>
</tr>
<tr>
<td>oCanvas       </td>
<td> N/A           </td>
<td> N/A                </td>
<td> 19</td>
</tr>
<tr>
<td>Paper.js      </td>
<td> paperjs       </td>
<td> 9                  </td>
<td> 49</td>
</tr>
<tr>
<td>processing.js </td>
<td> processing.js </td>
<td> 117                </td>
<td> 289 </td>
</tr>
</tbody>
</table>


<p><em>The gury library could not be found on StackOverflow. I've used N/A when I couldn't find a matching tag.</em></p>

<h3>Review from documentation, tutorials and other resources</h3>

<p>When choosing a framework, I value most the Github comparison. It provides a good overview of the development state of the library and the community using it. Since I'm generally not going to an expert level in a given field, I like being able to rely on the community.</p>

<p>But StackOverflow (SO) is really helpful, in particular when the comparison question has already been asked. Check this: <a href="http://stackoverflow.com/questions/8938969/current-state-of-javascript-canvas-libraries2012">Current state of Javascript canvas libraries</a></p>

<p>As a consequence, I will give a deeper review on documentation, tutorials and other resources for <strong>EaselJS</strong>, <strong>fabric.js</strong>, <strong>Paper.js</strong>, <strong>processing.js</strong> and the outsider, <strong>Kinetic.js</strong> to make a choice.</p>

<h4>Summary</h4>

<p><strong>EaselJS</strong>, <strong>fabric.js</strong>, <strong>Paper.js</strong>, <strong>processing.js</strong> can be seen as the 4 leaders. They have definitely the biggest communities of users, are available on Github, well documented, lots of external references (questions on SO, forums), and a good thing, according the the previous SO question, they are unit-tested.</p>

<p><strong>Kinetic.js</strong> is the outsider. Added more recently on Github, it's still quite dynamic but received a warm welcome from <a href="http://stackoverflow.com/users/130652/kangax">kangax</a>, the author of Fabric.js, in a SO comment.</p>

<p>These 4 libraries are all available on Github, and released under the permissive MIT license.</p>

<h4>EaselJS</h4>

<p>This library is <strong>part of the CreateJS suite</strong> which is a full-featured set of libraries to build advanced HTML5 interactive and animated graphics.</p>

<p>In particular, combined with the animation library (TweenJS), complex animations should be buildable. You also get the SoundJS library and the asset preloading library (PreloadJS) so you should have everything you need if you intend to build a game.</p>

<p>The website provides some nice demos whose source code is available within the Github repository.</p>

<p>The library also seems to work well with other libraries such as Box2d and TexturePacker.</p>

<p><strong>Support of touch devices is built in.</strong></p>

<h4>fabric.js</h4>

<p>Looking at the <a href="http://fabricjs.com/">home page</a>, it seems this library is more oriented on building <strong>vector edition tools</strong>. The main features are:</p>

<ul>
<li>create and manipulate (move, scale, rotate...) vector shapes and text objects,</li>
<li>import/export from/to SVG.</li>
</ul>


<p>It's summarized as <em>"an interactive object model on top of canvas element"</em>.</p>

<p><strong>If your goal is to build complex scenes, animate objects, it seems to me it's not the right choice.</strong></p>

<h4>Paper.js</h4>

<p>This library is a port from the Scriptographer library. A particularity is it's Paperscript language, which is basically an extended Javascript providing some mathematical operations on point and size objects. However it's still <a href="http://paperjs.org/tutorials/getting-started/paperscript-interoperability/">not documented</a>.</p>

<p>This library seems powerful in its capacity to build complex vector objects and managing mouse interactions. However, there is no mention of touch devices support, and the animation capability seems to be limited to the <code>onFrame()</code> method which is called 60 times per second and allows you to change the content of the canvas.</p>

<h4>processing.js</h4>

<p>The core goal of this library is to build <strong>interactive visualizations</strong>.</p>

<p>This library has a particulary history since it's a port of the famous Processing library. I say famous, not because I knew it myself, but because it's said to be famous among the multimedia and art community which uses it to build <strong>interactive artistic creations</strong>.</p>

<p>Looking at the <a href="http://processingjs.org/learning/">first code example</a>, it seems that this library intends to lower the learning curve for building animated and interactive graphics with the Canvas. It provides the tools to easily have a run loop and a <code>draw()</code> method you simply fill to build your visualization.</p>

<p>I think it thus provide a <strong>low learning-curve</strong>, perfect for <strong>non-developers artists and creative people</strong>, but is <strong>not the best-suited tool for building object-oriented components</strong>.</p>

<h4>Kinetic.js</h4>

<p>Kinetic.js is the outsider of this comparison because looking to its Github repo, it's far from being the most used one. However, a search on "canvas library" will return the associated HTML5 tutorials as first result, and it has a good deal of questions on StackOverflow.</p>

<p>The name is a good clue, but this library is advertised as <strong>pretty fast</strong> with lots of objects thanks to the use of multiple canvases.</p>

<p>It is provided with a <strong>nice documentation with tutorials</strong>, with an introduction on barebones HTML5 canvas use, detailed documentation on Kinetic.js and Three.js. It also provides nice tips, not specific to the library itself, to perform some actions with canvas.</p>

<h3>Result</h3>

<p>According to this review, I think I could go with one of <strong>EaselJS</strong> or <strong>Kinetic.js</strong>. <strong>Paper.js</strong> was not far but there is no mention of touch device support, so I'm pretty sure this would not be complicated to integrate, but I prefer to have something built in the library.</p>

<p>Finally, I will go with the outsider <strong>Kinetic.js</strong> because:</p>

<ul>
<li>I feel good with the example code,</li>
<li>the author provides an excellent <a href="http://www.html5canvastutorials.com/">set of tutorials</a>,</li>
<li>the documentation and examples are cleara and easy to read,</li>
<li>everything I need is included in the library (I don't feel like I may need to add another library such as <strong>TweenJS</strong> to solve a small problem while loading another large library I'm using at 20%).</li>
</ul>


<p><em>Feel free to share your comments, reviews, or missing libraries!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode failing when building for archiving because of a missing library link]]></title>
    <link href="http://www.softr.li/blog/2012/06/11/xcode-failing-when-building-for-archiving-because-of-a-missing-library-link/"/>
    <updated>2012-06-11T11:07:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/11/xcode-failing-when-building-for-archiving-because-of-a-missing-library-link</id>
    <content type="html"><![CDATA[<h3>The issue</h3>

<p>You may be using opensource libraries within your iOS project. (<em>If you don't, you should, it's a great time-saver. Check <a href="http://pinterest.com/rchampourlier/best-ios-controls/">here</a> for some starters.</em>)</p>

<p>As you may know, XCode may sometimes become really painful when dealing with the <strong>compilation and linking of external libraries</strong>. It may just work fine when compiling for development, but when you want it compiled for distribution, XCode may just not agree anymore.</p>

<p>I just faced such an issue this morning. This time, I met the <code>ld: library not found for...</code> error:</p>

<p><img src="/images/2012-06-11-screenshot-1.png"></p>

<!-- more -->


<p>Googling a little, I found these two StackOverflow answers, but they could not help me. You can give a try, this may still contain the answer to your own issue.</p>

<h3>The solution</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/5584317/compile-build-or-archive-problems-with-xcode-4-and-dependancies">Compile, Build or Archive problems with Xcode 4 (and dependancies)</a></li>
<li><a href="http://stackoverflow.com/questions/6004919/missing-library-link-error-when-doing-product-build-for-archiving-in-xcode-4">Missing Library link error when doing Product > Build For Archiving in Xcode 4</a></li>
</ul>


<p>I checked where the generated could be, and looking at the logs of the build process, I could find the directory's path: <code>/Users/me/Library/Developer/Xcode/DerivedData/.../</code></p>

<p>Checking the content of this directory, I discovered that my issue was that the library was indeed not build for the <code>Distribution-iphoneos</code> configuration:</p>

<p><img src="/images/2012-06-11-screenshot-2.png"></p>

<p>Correcting the issue was as simple as going to the library's project settings and adding the <code>Distribution</code> configuration:</p>

<p><img src="/images/2012-06-11-screenshot-3.png"></p>

<h3>The conclusion</h3>

<p>Be sure to check that the libraries you include within your XCode project have all the necessary configurations setup!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Bootstrap within your Rails 3.1+ app]]></title>
    <link href="http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app/"/>
    <updated>2012-06-07T12:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/bootstrap">Bootstrap</a> is a real gift from Twitter. It provides a good deal of packaged, well-designed and simple to use UI components for any web application.</p>

<p>I wanted to use it for quite some time, but I hadn't found the time nor the project to apply it on. I recently updated an administration web-app for one of my project, and I felt it was the good time.</p>

<p>So here are my first feedbacks and tips on how to integrated Bootstrap with Rails (I'm on Rails 3.2.5, it's the lowest-effort path if you're using Formtastic too).</p>

<!-- more -->


<h3>First, where do I put the files?</h3>

<p>Say you want to use <a href="http://twitter.github.com/bootstrap">Twitter Bootstrap</a> within your Rails 3.1+ (ie. asset pipeline featured) application.</p>

<p>After some tests I couldn't find a simple way to <strong>keep the whole bootstrap directory packaged and get it accessed correctly by the asset pipeline</strong>. So the best way I found yet is to <strong>explode it into the appropriate directories</strong>:</p>

<ul>
<li>CSS files goes into <code>vendor/assets/stylesheets</code></li>
<li>JS files goes into <code>vendor/assets/javascripts</code></li>
<li>image files goes into <code>vendor/assets/images</code></li>
</ul>


<p>So this way I can simply require Bootstrap CSS through this <code>application.css</code> file:</p>

<p><code>css app/assets/application.css
/*
 * This is a manifest file that'll automatically include all the stylesheets available in this directory
 * and any sub-directories. You're free to add application-wide styles to this file and they'll appear at
 * the top of the compiled file, but it's generally better to create a new file per style scope.
 *= require_self
 *= require_tree .
 *= require bootstrap
*/
</code></p>

<p>If this does not work, be sure to <strong>restart your development server</strong> as changing location of assets may not be taken into account until restart...</p>

<h3>This breaks my tasty forms!</h3>

<p>Are you using <a href="https://github.com/justinfrench/formtastic">Formtastic</a>? I am, this is one of the things I like to have with every Rails project. However, Formtastic and Bootstrap do not naturally go together well.</p>

<p>To make them love each other, we have to add a gem which will tweak the way Formtastic builds the forms to make them Bootstrap-proof. This is the intent of <a href="https://github.com/rchampourlier/formtastic-bootstrap">formtastic-bootstrap</a>.</p>

<p>You can add this to your Gemfile, that should be all:</p>

<p><code>
gem 'formtastic-bootstrap', :git =&gt; 'https://github.com/rchampourlier/formtastic-bootstrap.git', :branch =&gt; 'bootstrap2-rails3-2-formtastic-2-2-1'
</code>
<em>This assumes your on Rails 3.2 and Formtastic 2.2.1, as the branch name indicates.</em></p>

<p>I've sent you to my own fork which is forking an already long chain of forks. The <a href="https://github.com/mjbellantoni/formtastic-bootstrap">original repo</a> seems not to be maintained anymore. My fork provides a <code>bootstrap2-rails3-2-formtastic-2-2-1</code> branch which should work for Rails 3.2 and the current version of Formtastic, the 2.2.1 (some changes were to be taken into account from 2.2.0).</p>

<p><em>My fork does not take all 2.2.1 changes into account. You may have issues with <code>time_select</code> inputs...</em></p>

<h3>My flash messages aren't that nice!</h3>

<p>To style your Rails' flash messages using the nice Bootstrap's alert style, you can have a look to this <a href="https://gist.github.com/2887844">gist</a>:</p>

<p><div><script src='https://gist.github.com/2887844.js?file='></script>
<noscript><pre><code>- if flash
  - flash.each do |level, message|
    %div{:class =&gt; &quot;alert #{flash_level(level)}&quot;}
      %button.close{:&quot;data-dismiss&quot; =&gt; 'alert'}= &quot;×&quot;
      = message</code></pre></noscript></div>
</p>

<p>Just replace your current way of displaying the flashes in your template with this, and you're done!</p>

<p><code>ruby
= render :partial =&gt; 'layouts/flash', :locals =&gt; { :flash =&gt; flash }
</code></p>

<hr />

<p><em>I hope this helps, do not hesitate if you see mistakes or some parts which require additional details!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppleScript to automate the setup of your development space]]></title>
    <link href="http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space/"/>
    <updated>2012-05-26T16:34:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space</id>
    <content type="html"><![CDATA[<p>Today is Saturday, and like every week-end, I'm getting a little lazy.</p>

<p>Say you're working on a Rails project on MacOS X. If you're like me, you like to have a terminal window for your project with several tabs:</p>

<ul>
<li>one for typing various commands,</li>
<li>one with your <code>spork</code> process,</li>
<li>one with your <code>rails console</code>,</li>
<li>and one with your <code>rails server</code>.</li>
</ul>


<p>Starting all this little world already involves some keystrokes and typing, even more if you're using Vagrant (which <a href="http://www.softr.li/blog/categories/vagrant/">I'm using for a week</a> and is really awesome).</p>

<p>So why not use the simple tools provided by Apple to have this setup with a single action?</p>

<!-- more -->


<h2>The AppleScript</h2>

<p>AppleScript is the scripting solution provided by Apple and it's perfect for what we want to do. It's quite simple, and it allows you to script the Terminal application.</p>

<p>Here is the script:</p>

<p><div><script src='https://gist.github.com/2794125.js?file='></script>
<noscript><pre><code>-- This script enables you to use MacOS X AppleScript to open a terminal
-- window and several tabs to:
--   - load a vagrant box with vagrant up
--   - ssh in the box on each tab
--   - run specific commands within the vagrant box on different tabs
--
-- For example, open 4 tabs, each within the vagrant box, one with spork,
-- one with a Rails console and the last one with the rails server.
--
-- It assumes when you ssh into the vagrant box you automatically cd into
-- the project's directory (by having a `cd /vagrant` within your
-- `~/.bashrc` on the box for example).
--
-- It also uses a `dev-project` alias on the host which cd in the appropriate
-- project's directory, but you can just replace it by a `cd ...` command.

using terms from application &quot;Terminal&quot;
  tell application &quot;Terminal&quot;
    activate
    
    -- open the terminal's window, set its dimensions   
    set tab1 to do script
    do script &quot;dev-project&quot; in tab1
    do script &quot;vagrant up&quot; in tab1
    repeat
      delay 0.5
      if busy of tab1 is false then exit repeat
    end repeat
    
    -- tab 1: ssh in vagrant
    do script &quot;vagrant ssh&quot; in tab1
    delay 0.5
    
    -- tab 2: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab2 to tab 2 of currentWindow
    do script &quot;dev-project&quot; in tab2
    do script &quot;vagrant ssh&quot; in tab2
    do script &quot;bundle exec spork&quot; in tab2
    delay 0.5
    
    -- tab 3: ssh in vagrant and run rails console
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab3 to tab 3 of currentWindow
    do script &quot;dev-project&quot; in tab3
    do script &quot;vagrant ssh&quot; in tab3
    do script &quot;bundle exec rails console&quot; in tab3
    delay 0.5
    
    -- tab 4: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab4 to tab 4 of currentWindow
    do script &quot;dev-project&quot; in tab4
    do script &quot;vagrant ssh&quot; in tab4
    do script &quot;bundle exec rails server&quot; in tab4
  end tell
end using terms from</code></pre></noscript></div>
</p>

<p>It's intended for my use, so it relies on some aliases I've defined on my host machine. But it's quite simple to read and comes with some comments, so I'm sure you will have no difficulty to adapt it to your needs.</p>

<h2>Access the script</h2>

<p>You can run this script from a Terminal window by using <code>osascript path/to/the/script.scpt</code>, but I prefer to have it in the script menu.</p>

<p>You can activate the script menu from the script editor's preferences. Then just have a look in the menu to open the user's scripts directory and put your script file in it.</p>

<hr />

<p><em>If you need any help, just ask!</em></p>

<p><em>If you're aware of a better solution to setup a development environment like this, don't hesitate to tell me! I'm pretty sure there are some other ways I don't know yet...</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forked TabBarKit]]></title>
    <link href="http://www.softr.li/blog/2012/05/24/forked-tabbarkit/"/>
    <updated>2012-05-24T16:52:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/24/forked-tabbarkit</id>
    <content type="html"><![CDATA[<p>I have had to rewrite some parts of TBKTabBarController since I needed to be able to programmatically select a tab. This is normally possible by setting the <code>selectedIndex</code> or the <code>selectedViewController</code> property of the tab bar controller, but this was not working with TabBarKit.</p>

<p>I investigated and detected this behavior was not implemented, so I decided to complete it myself.</p>

<p>Along the way, I discovered there were some issues with the <code>containerView</code> being mixed up with the <code>TBKTabBarController</code>'s view, so I also corrected these bugs.</p>

<p>I've forked the repository and updated it with my corrected code, so have a look to this <a href="https://github.com/rchampourlier/TabBarKit">repo</a> if you need this.</p>

<p>Oh, I also added a <code>TBKTabBarStyleTwiceHeight</code> I use to double the size of the tab bar on iPad, so you get this for free too ;)</p>
]]></content>
  </entry>
  
</feed>
