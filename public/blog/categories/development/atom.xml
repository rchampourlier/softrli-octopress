<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-05-26T16:56:40+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AppleScript to automate the setup of your development space]]></title>
    <link href="http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space/"/>
    <updated>2012-05-26T16:34:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space</id>
    <content type="html"><![CDATA[<p>Today is Saturday, and like every week-end, I'm getting a little lazy.</p>

<p>Say you're working on a Rails project on MacOS X. If you're like me, you like to have a terminal window for your project with several tabs:</p>

<ul>
<li>one for typing various commands,</li>
<li>one with your <code>spork</code> process,</li>
<li>one with your <code>rails console</code>,</li>
<li>and one with your <code>rails server</code>.</li>
</ul>


<p>Starting all this little world already involves some keystrokes and typing, even more if you're using Vagrant (which <a href="http://www.softr.li/blog/categories/vagrant/">I'm using for a week</a> and is really awesome).</p>

<p>So why not use the simple tools provided by Apple to have this setup with a single action?</p>

<!-- more -->


<h2>The AppleScript</h2>

<p>AppleScript is the scripting solution provided by Apple and it's perfect for what we want to do. It's quite simple, and it allows you to script the Terminal application.</p>

<p>Here is the script:</p>

<p><div><script src='https://gist.github.com/2794125.js?file='></script>
<noscript><pre><code>-- This script enables you to use MacOS X AppleScript to open a terminal
-- window and several tabs to:
--   - load a vagrant box with vagrant up
--   - ssh in the box on each tab
--   - run specific commands within the vagrant box on different tabs
--
-- For example, open 4 tabs, each within the vagrant box, one with spork,
-- one with a Rails console and the last one with the rails server.
--
-- It assumes when you ssh into the vagrant box you automatically cd into
-- the project's directory (by having a `cd /vagrant` within your
-- `~/.bashrc` on the box for example).
--
-- It also uses a `dev-project` alias on the host which cd in the appropriate
-- project's directory, but you can just replace it by a `cd ...` command.

using terms from application &quot;Terminal&quot;
  tell application &quot;Terminal&quot;
    activate
    
    -- open the terminal's window, set its dimensions   
    set tab1 to do script
    do script &quot;dev-project&quot; in tab1
    do script &quot;vagrant up&quot; in tab1
    repeat
      delay 0.5
      if busy of tab1 is false then exit repeat
    end repeat
    
    -- tab 1: ssh in vagrant
    do script &quot;vagrant ssh&quot; in tab1
    delay 0.5
    
    -- tab 2: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab2 to tab 2 of currentWindow
    do script &quot;dev-project&quot; in tab2
    do script &quot;vagrant ssh&quot; in tab2
    do script &quot;bundle exec spork&quot; in tab2
    delay 0.5
    
    -- tab 3: ssh in vagrant and run rails console
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab3 to tab 3 of currentWindow
    do script &quot;dev-project&quot; in tab3
    do script &quot;vagrant ssh&quot; in tab3
    do script &quot;bundle exec rails console&quot; in tab3
    delay 0.5
    
    -- tab 4: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab4 to tab 4 of currentWindow
    do script &quot;dev-project&quot; in tab4
    do script &quot;vagrant ssh&quot; in tab4
    do script &quot;bundle exec rails server&quot; in tab4
  end tell
end using terms from</code></pre></noscript></div>
</p>

<p>It's intended for my use, so it relies on some aliases I've defined on my host machine. But it's quite simple to read and comes with some comments, so I'm sure you will have no difficulty to adapt it to your needs.</p>

<h2>Access the script</h2>

<p>You can run this script from a Terminal window by using <code>osascript path/to/the/script.scpt</code>, but I prefer to have it in the script menu.</p>

<p>You can activate the script menu from the script editor's preferences. Then just have a look in the menu to open the user's scripts directory and put your script file in it.</p>

<hr />

<p><em>If you need any help, just ask!</em></p>

<p><em>If you're aware of a better solution to setup a development environment like this, don't hesitate to tell me! I'm pretty sure there are some other ways I don't know yet...</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forked TabBarKit]]></title>
    <link href="http://www.softr.li/blog/2012/05/24/forked-tabbarkit/"/>
    <updated>2012-05-24T16:52:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/24/forked-tabbarkit</id>
    <content type="html"><![CDATA[<p>I have had to rewrite some parts of TBKTabBarController since I needed to be able to programmatically select a tab. This is normally possible by setting the <code>selectedIndex</code> or the <code>selectedViewController</code> property of the tab bar controller, but this was not working with TabBarKit.</p>

<p>I investigated and detected this behavior was not implemented, so I decided to complete it myself.</p>

<p>Along the way, I discovered there were some issues with the <code>containerView</code> being mixed up with the <code>TBKTabBarController</code>'s view, so I also corrected these bugs.</p>

<p>I've forked the repository and updated it with my corrected code, so have a look to this <a href="https://github.com/rchampourlier/TabBarKit">repo</a> if you need this.</p>

<p>Oh, I also added a <code>TBKTabBarStyleTwiceHeight</code> I use to double the size of the tab bar on iPad, so you get this for free too ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant-stacks, a provision-on-demand tool for Vagrant!]]></title>
    <link href="http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant/"/>
    <updated>2012-05-20T09:42:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://www.vagrantup.com">Vagrant</a> is really an excellent tool for building and using virtual machines for your development environment. It <strong>ease the maintenance</strong> and allows to <strong>share the same environment within the whole team</strong>.</p>

<p>However, <strong>Vagrant itself only provides you with barebones boxes</strong>.  You still have to work for provisioning the box, <strong>which requires that you build a Chef recipe</strong> (or Puppet, but I'm using Chef so I will only refer to this one).</p>

<p><strong>Instead of using a packaged box</strong> (e.g. from <a href="[http://vagrantbox.es">vagrantbox.es</a>) which you may <strong>not trust or feal comfortable with</strong>, you can use <a href="https://github.com/rchampourlier/vagrant-stacks">this repo</a> to <strong>build and package your Vagrant box by yourself</strong>. It provides the tools and some configurations which will enable you to build a provisioned box without writing the recipe! The advantage of this approach over packaged boxes is that you can <strong>review how the box is built and provisioned</strong>. You can even refine the configurations and build new ones by forking the repo and submitting pull requests!</p>

<p>It already provides a configuration for a <strong>Ruby 1.9.2-p290 stack, managed with rbenv and Bundler, plus a PostgreSQL 8.4 database and MongoDB</strong>.</p>

<p>So feel free to <strong>try and share new configurations</strong>! Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging TabBarKit, a barebones kit for custom tab bar on iOS]]></title>
    <link href="http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios/"/>
    <updated>2012-05-10T12:36:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios</id>
    <content type="html"><![CDATA[<p>For our <a href="http://itunes.apple.com/fr/app/cultimots-un-jeu-culture-vocabulaire/id483710651?l=fr&amp;ls=1&amp;mt=8">Cultimots</a> application, I wanted to customize the application's tab bar. I looked a little on Google, <a href="http://cocoacontrols.com/">cocoacontrols.com</a>, Github, but I didn't want to use a full-featured solution which may not remain configurable for what I add in mind.</p>

<p>I finally went for <strong>TabBarKit</strong>, which is quite barebones, <strong>reproducing the basic features of <code>UITabBar</code></strong> while letting me <strong>play with the code to get my own thing</strong>.</p>

<p>On this way I encountered several time-consuming issues due to the non-existent documentation of TabBarKit and some bugs in the shared code. Since I already customized the code to fit my own project <strong>I won't share the updated source code</strong>, I will however share the issues I met and the solutions I found. Hope this will make your path faster than mine!</p>

<!--more -->


<h3>Confusion between tab bar style and tab bar item selection style</h3>

<p>There is a confusion between the tab bar's style, which is a <code>TBKTabBarStyle</code>, and the tab bar item selection's style, which is a <code>TBKTabBarItemSelectionStyle</code>.</p>

<p>This confusion is explicit in these lines:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarController.m:119
TBKTabBarItem *tabItem = [[[TBKTabBarItem alloc] initWithImageName:controller.tabImageName style:self.tabBarStyle tag:tagIndex title:controller.title] autorelease];
</code></p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:170
-(id) initWithImageName:(NSString *)anImageName style:(TBKTabBarItemSelectionStyle)aStyle tag:(NSInteger)aTag title:(NSString *)aTitle {
</code></p>

<p>The tab bar item <code>init</code> method expects <code>aStyle</code> to be a <code>TBKTabBarItemSelectionStyle</code> but the controller provides its own style, which is a <code>TBKTabBarStyle</code>. This is OK in the source code because in fact the both style are <code>enum</code>s with matching integer values. If you add yours, just be sure to clean this mess.</p>

<h2>Enabling titles</h2>

<p>In the source code from the Github repo, titles are disabled. To restore them, you will have to uncomment some lines from <code>TabBarKit/Classes/TBKTabBarItem.m</code>:</p>

<p><code>``objc TabBarKit/Classes/TBKTabBarItem.m:178-188</code>
if (self.controllerTitle &amp;&amp; self.selectionStyle == TBKTabBarItemDefaultSelectionStyle) {</p>

<pre><code>    /*
    self.displayTitle = YES;
    self.titleLabel.font = [UIFont boldSystemFontOfSize:10.0];
    self.titleLabel.textAlignment = UITextAlignmentCenter;
    self.titleLabel.contentMode = UIViewContentModeLeft;
    self.imageEdgeInsets = UIEdgeInsetsMake(0, 22, 11, 0);
    self.titleEdgeInsets = UIEdgeInsetsMake(0, -35, 2, 0);
    [self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
    */
}
</code></pre>

<p>```</p>

<p>There is also a bug on this line:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
</code></p>

<p>If you set the title for both <code>UIControlStateNormal</code> and <code>UIControlStateSelected</code>, it won't show up for the tab bar items which are not selected, and their layout will get broken. Just replace the line by this:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal)];
</code></p>

<h2>Finishing touch</h2>

<h3>Grey titles for the non-selected items</h3>

<p>Update the lines 170 to 175 to have this in <code>TabBarKit/Classes/TBKTabBar.m</code>:</p>

<p>```objc TabBarKit/Classes/TBKTabBar.m:170-175
for (TBKTabBarItem *tab in self.items) {</p>

<pre><code>currentBounds.origin.x += self.tabMargin;
tab.frame = currentBounds;
currentBounds.origin.x += currentBounds.size.width;
[self addSubview:tab];
tab.titleLabel.textColor = [UIColor grayColor]; // added line
</code></pre>

<p>}
```</p>

<p>Update the <code>setSelected:</code> method in <code>TabBarKit/Classes/TBKTabBarItem.m:213-217</code>:</p>

<p>```objc</p>

<pre><code>else {
    if ([self.layer.sublayers containsObject:self.selectionLayer]) {
        [self.selectionLayer removeFromSuperlayer];
    }
self.titleLabel.textColor = [UIColor grayColor]; // added line
}
</code></pre>

<p>}
```</p>

<p><strong>Your tab bar should already look great! The rest is customization, and it's up to you! Have fun!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manually installing a gem from a git repo]]></title>
    <link href="http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo/"/>
    <updated>2012-04-22T10:16:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo</id>
    <content type="html"><![CDATA[<p><code>
gem uninstall gem_name
git clone git://github.com/repo_name/gem_name.git
cd gem_name
gem build gem_name.gemspec
gem install ./&lt;the gem that was compiled&gt;
</code></p>
]]></content>
  </entry>
  
</feed>
