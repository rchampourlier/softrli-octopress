<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-05-19T11:59:07+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging TabBarKit, a barebones kit for custom tab bar on iOS]]></title>
    <link href="http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios/"/>
    <updated>2012-05-10T12:36:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios</id>
    <content type="html"><![CDATA[<p>For our <a href="http://itunes.apple.com/fr/app/cultimots-un-jeu-culture-vocabulaire/id483710651?l=fr&amp;ls=1&amp;mt=8">Cultimots</a> application, I wanted to customize the application's tab bar. I looked a little on Google, <a href="http://cocoacontrols.com/">cocoacontrols.com</a>, Github, but I didn't want to use a full-featured solution which may not remain configurable for what I add in mind.</p>

<p>I finally went for <strong>TabBarKit</strong>, which is quite barebones, <strong>reproducing the basic features of <code>UITabBar</code></strong> while letting me <strong>play with the code to get my own thing</strong>.</p>

<p>On this way I encountered several time-consuming issues due to the non-existent documentation of TabBarKit and some bugs in the shared code. Since I already customized the code to fit my own project <strong>I won't share the updated source code</strong>, I will however share the issues I met and the solutions I found. Hope this will make your path faster than mine!</p>

<!--more -->


<h3>Confusion between tab bar style and tab bar item selection style</h3>

<p>There is a confusion between the tab bar's style, which is a <code>TBKTabBarStyle</code>, and the tab bar item selection's style, which is a <code>TBKTabBarItemSelectionStyle</code>.</p>

<p>This confusion is explicit in these lines:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarController.m:119
TBKTabBarItem *tabItem = [[[TBKTabBarItem alloc] initWithImageName:controller.tabImageName style:self.tabBarStyle tag:tagIndex title:controller.title] autorelease];
</code></p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:170
-(id) initWithImageName:(NSString *)anImageName style:(TBKTabBarItemSelectionStyle)aStyle tag:(NSInteger)aTag title:(NSString *)aTitle {
</code></p>

<p>The tab bar item <code>init</code> method expects <code>aStyle</code> to be a <code>TBKTabBarItemSelectionStyle</code> but the controller provides its own style, which is a <code>TBKTabBarStyle</code>. This is OK in the source code because in fact the both style are <code>enum</code>s with matching integer values. If you add yours, just be sure to clean this mess.</p>

<h2>Enabling titles</h2>

<p>In the source code from the Github repo, titles are disabled. To restore them, you will have to uncomment some lines from <code>TabBarKit/Classes/TBKTabBarItem.m</code>:</p>

<p><code>``objc TabBarKit/Classes/TBKTabBarItem.m:178-188</code>
if (self.controllerTitle &amp;&amp; self.selectionStyle == TBKTabBarItemDefaultSelectionStyle) {</p>

<pre><code>    /*
    self.displayTitle = YES;
    self.titleLabel.font = [UIFont boldSystemFontOfSize:10.0];
    self.titleLabel.textAlignment = UITextAlignmentCenter;
    self.titleLabel.contentMode = UIViewContentModeLeft;
    self.imageEdgeInsets = UIEdgeInsetsMake(0, 22, 11, 0);
    self.titleEdgeInsets = UIEdgeInsetsMake(0, -35, 2, 0);
    [self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
    */
}
</code></pre>

<p>```</p>

<p>There is also a bug on this line:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
</code></p>

<p>If you set the title for both <code>UIControlStateNormal</code> and <code>UIControlStateSelected</code>, it won't show up for the tab bar items which are not selected, and their layout will get broken. Just replace the line by this:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal)];
</code></p>

<h2>Finishing touch</h2>

<h3>Grey titles for the non-selected items</h3>

<p>Update the lines 170 to 175 to have this in <code>TabBarKit/Classes/TBKTabBar.m</code>:</p>

<p>```objc TabBarKit/Classes/TBKTabBar.m:170-175
for (TBKTabBarItem *tab in self.items) {</p>

<pre><code>currentBounds.origin.x += self.tabMargin;
tab.frame = currentBounds;
currentBounds.origin.x += currentBounds.size.width;
[self addSubview:tab];
tab.titleLabel.textColor = [UIColor grayColor]; // added line
</code></pre>

<p>}
```</p>

<p>Update the <code>setSelected:</code> method in <code>TabBarKit/Classes/TBKTabBarItem.m:213-217</code>:</p>

<p>```objc
else {</p>

<pre><code>if ([self.layer.sublayers containsObject:self.selectionLayer]) {
    [self.selectionLayer removeFromSuperlayer];
}
</code></pre>

<p>   self.titleLabel.textColor = [UIColor grayColor]; // added line
}
```</p>

<p><strong>Your tab bar should already look great! The rest is customization, and it's up to you! Have fun!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manually installing a gem from a git repo]]></title>
    <link href="http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo/"/>
    <updated>2012-04-22T10:16:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo</id>
    <content type="html"><![CDATA[<p><code>
gem uninstall gem_name
git clone git://github.com/repo_name/gem_name.git
cd gem_name
gem build gem_name.gemspec
gem install ./&lt;the gem that was compiled&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linking local node modules with npm]]></title>
    <link href="http://www.softr.li/blog/2012/04/16/linking-local-node-modules-with-npm/"/>
    <updated>2012-04-16T10:10:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/16/linking-local-node-modules-with-npm</id>
    <content type="html"><![CDATA[<p>How to link a <strong>node module</strong> to a <strong>local source directory</strong> instead of installing from npm repository.</p>

<!-- more -->


<h2>Link a module to a local repo</h2>

<p>When you need a fresher version of a module that the one published to npm repository (e.g. if you have your own patch, if new commits haven't been released yet), you may want to clone the module locally and have npm use it instead of the published one.</p>

<p>To do this, you <strong>link</strong> your local package.</p>

<pre><code>git clone https://github.com/repo/node-module.git
cd node-module
npm link
</code></pre>

<p><em>You may need to <code>sudo</code> to perform the <code>link</code> command (this is because the link gets installed system-wide, in <code>/usr/local/lib/node_modules</code> on my MacOS X system).</em></p>

<p><strong>Check the log of this command to see on which path npm references the linked module. In my case, the module was named as <code>node-module</code>, but npm was using <code>module</code> for the reference. In this case, be sure to link in your app (next section) using <code>module</code> and not <code>node-module</code>.</strong></p>

<h2>Link this module in your node application</h2>

<p>You will now tell npm to use this linked version of the module for your application:</p>

<pre><code>cd your_application
npm link module
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB CheatSheet]]></title>
    <link href="http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet/"/>
    <updated>2012-04-15T10:05:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet</id>
    <content type="html"><![CDATA[<p>Another cheatsheet, for <strong>useful MongoDB commands</strong> to use inside the <code>mongo</code> command-line tool.</p>

<!-- more -->


<h2>Get a list of handy commands</h2>

<pre><code>help
</code></pre>

<h2>List DBs</h2>

<pre><code>show dbs
</code></pre>

<h2>Select a DB</h2>

<pre><code>use mydb
</code></pre>

<h2>Show collections</h2>

<pre><code>show collections
</code></pre>

<h2>List all documents in a collection</h2>

<pre><code>db.collectionName.find()
</code></pre>

<h2>Get a specific object in a collection</h2>

<h3>Through its index</h3>

<pre><code>var object = db.collectionName.find().toArray()[index];
</code></pre>

<h3>With a where-like clause</h3>

<p>Assuming you want to find objects matching x=1 and y=2:</p>

<pre><code>var objects = db.collectionName.find((x:1), (y:2));
</code></pre>

<h2>Update an object</h2>

<pre><code>var object.attribute = newValue;
db.collectionName.save(object);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make your own gems with Jeweler]]></title>
    <link href="http://www.softr.li/blog/2012/04/14/how-to-make-your-own-gems-with-jeweler/"/>
    <updated>2012-04-14T10:03:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/14/how-to-make-your-own-gems-with-jeweler</id>
    <content type="html"><![CDATA[<p>A really simple walkthrough on how to <strong>package a gem easily</strong> using the <strong>Jeweler</strong> gem.</p>

<!-- more -->


<h2>Prerequisites</h2>

<ul>
<li>You're using Bundler.</li>
<li>You have <code>gem 'jeweler'</code> in your <code>Gemfile</code>.</li>
<li>You have run <code>bundle install</code>.</li>
</ul>


<h2>Add the <code>gemspec</code> task to your <code>Rakefile</code></h2>

<p>Add these lines to your <code>Rakefile</code>. This will help Jeweler to build the appropriate <code>gemspec</code> for your gem.</p>

<pre><code>begin
  require 'jeweler'
  Jeweler::Tasks.new do |gemspec|
    gemspec.name = "the_name_of_your_gem"
    gemspec.summary = "A summary for your gem"
    gemspec.description = "A description for your gem"
    gemspec.email = "your_name@your_company.com"
    gemspec.homepage = "http://an_url_for_your_gem.com"
    gemspec.authors = ["your@email.com"]
  end
rescue LoadError
  puts "Jeweler not available. Install it with: gem install jeweler"
end
</code></pre>

<h2>Package the gem</h2>

<p>To package the gem, you just have to run the <code>rake</code> task you added, and another <code>build</code> task.</p>

<pre><code>rake gemspec
rake build
</code></pre>

<h2>Include your gem hosted on Github in your Rails application</h2>

<p>Assuming your repository is commited on Github, you can easily include your gem in your Rails project using the following line in your <code>Gemfile</code>:</p>

<pre><code>gem 'your_gem_name', :git =&gt; "path_to_your_gem.git"
</code></pre>

<p>You can also specify a branch with <code>:branch =&gt; "stable"</code> and a tag with <code>:tag =&gt; "2-stable"</code>.</p>

<h2>Include your gem from a local directory</h2>

<p>You can tell Bundler to get your gem from a local directory using the <code>:path</code> parameter. The path is relative to the directory containing the <code>Gemfile</code>:</p>

<pre><code>gem "rails", :path =&gt; "vendor/rails"
</code></pre>

<h2>Directly include the library</h2>

<p><em>If you're building a gem, that's probably not your goal, but you can also just include an external lib without needing to package it as a gem. Just use:</em></p>

<pre><code>require 'path_to_gem/lib/gem'
</code></pre>

<h2>Hubticle tags</h2>

<p>ruby, gem, jeweler, library, module, share, github</p>
]]></content>
  </entry>
  
</feed>
