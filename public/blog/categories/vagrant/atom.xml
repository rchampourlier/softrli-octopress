<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-11-08T12:17:51+01:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capybara using Selenium, with RSpec, in the Vagrant (remotely)]]></title>
    <link href="http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely/"/>
    <updated>2012-11-08T12:00:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely</id>
    <content type="html"><![CDATA[<h3>Let's assume:</h3>

<ul>
<li>you're using RSpec for your tests,</li>
<li>you use Capybara for your integration/acceptance specs,</li>
<li>you run your tests in a Vagrant box.</li>
</ul>


<p>Let's also say everything is working fine (I won't deal with any issue you may have before this point).</p>

<p>Now, <strong>you have some features / user stories / whatever that requires some Javascript action</strong>.</p>

<h3>Well.</h3>

<p><strong>If you weren't using Vagrant</strong>, I'd say everything should go fine too. Just append <code>:js =&gt; true</code> to your RSpec example, it will use Selenium and everything will go fine using your installed Firefox binary.</p>

<p>But <strong>you're testing in a Vagrant box</strong>. So here's what you'll get:</p>

<p>```
Failure/Error: visit "/whatever"</p>

<pre><code> Selenium::WebDriver::Error::WebDriverError:
   Could not find Firefox binary (os=linux). Make sure Firefox is installed or set the path manually with Selenium::WebDriver::Firefox::Binary.path=
</code></pre>

<p>```</p>

<h3>So you may say, fine, let's install Firefox!</h3>

<p>But... your Vagrant box is meant to be <strong>used in headless mode</strong>, and Firefox requires something to draw on. Still, you may have it to work. But I'll assume (again) that <strong>you don't want to bother with setting things for the client-side of the test on the development/test box</strong> (which is more server-side) <strong>, and use everything that's already on you real development machine</strong> (your day-to-day browsers).</p>

<p><em>If my assumption is false, you can have a look to <a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">this article</a>, which explains both approaches (but not for RSpec, that's the why of this article).</em></p>

<h3>The solution? selenium server!</h3>

<p>What you want is Capybara to use its selenium driver, but <strong>instead of running a local copy of the browser</strong>, use <a href="http://seleniumhq.org/download/">selenium server</a> which will <strong>allows Capybara to use browsers running in your real development machine</strong> (the host of your Vagrant development box).</p>

<h3>Ok I got it, how do I do it?</h3>

<p><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">This article</a> is pretty well made, with far more explanations that I provide, so I encourage you to have a look to fully understand how it works. However, <strong>it doesn't provide the solution if you're using RSpec</strong>, since it builds a simple <code>Unit::TestCase</code> example.</p>

<p><strong>This is where I truly do something.</strong></p>

<h3>Here's how to get it working with RSpec (and even in Spork)</h3>

<p>Add this one line in your <code>spec_helper.rb</code> file (one line?!!!):</p>

<p><code>
  require_relative 'support/capybara_remote'
</code></p>

<p>After the <code>require 'capybara/rspec'</code> would be great. If you're using Spork, it should be in the <code>prefork</code> block.</p>

<p>Well, not truly a one-liner. Add this to a <code>spec/support/capybara_remote.rb</code> file too:</p>

<p><div><script src='https://gist.github.com/4038197.js?file='></script>
<noscript><pre><code># SELENIUM_SERVER is the IP address or hostname of the system running Selenium
# Server, this is used to determine where to connect to when using one of the
# selenium_remote_* drivers
SELENIUM_SERVER = &quot;10.10.11.1&quot;

# SELENIUM_APP_HOST is the IP address or hostname of this system (where the
# tests run against) as reachable for the SELENIUM_SERVER. This is used to set
# the Capybara.app_host when using one of the selenium_remote_* drivers
SELENIUM_APP_HOST = &quot;10.10.11.2&quot;

# CAPYBARA_DRIVER is the Capybara driver to use, this defaults to Selenium with
# Firefox
CAPYBARA_DRIVER = &quot;selenium_remote_firefox&quot;

# At this point, Capybara.default_driver is :rack_test, and
# Capybara.javascript_driver is :selenium. We can't run :selenium in the Vagrant box,
# so we set the javascript driver to :selenium_remote_firefox which we're going to
# configure.
Capybara.javascript_driver = :selenium_remote_firefox

RSpec.configure do |config|

  config.before(:each) do
    if selenium_remote?
      Capybara.app_host = &quot;http://#{SELENIUM_APP_HOST}:#{page.driver.rack_server.port}&quot;
    end
  end

  config.after(:each) do
    Capybara.reset_sessions!
    Capybara.use_default_driver
    Capybara.app_host = nil
  end

  # Determines if a selenium_remote_* driver is being used
  def selenium_remote?
    !(Capybara.current_driver.to_s =~ /\Aselenium_remote/).nil?
  end
end

# Set the default driver to CAPYBARA_DRIVER, when you change the driver in one
# of your tests resetting it to the default will ensure that its reset to what
# you specified when starting the tests.
#Capybara.default_driver = CAPYBARA_DRIVER.to_sym

# CapybaraDriverRegistrar is a helper class that enables you to easily register
# Capybara drivers
class CapybaraDriverRegistrar

  # register a Selenium driver for the given browser to run on the localhost
  def self.register_selenium_local_driver(browser)
    Capybara.register_driver &quot;selenium_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: browser)
    end
  end

  # register a Selenium driver for the given browser to run with a Selenium
  # Server on another host
  def self.register_selenium_remote_driver(browser)
    Capybara.register_driver &quot;selenium_remote_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: :remote, url: &quot;http://#{SELENIUM_SERVER}:4444/wd/hub&quot;, desired_capabilities: browser)
    end
  end
end

# Register various Selenium drivers
CapybaraDriverRegistrar.register_selenium_remote_driver(:firefox)</code></pre></noscript></div>
</p>

<p>Be sure to adjust the constants (<code>SELENIUM_SERVER</code>, <code>SELENIUM_APP_HOST</code>, <code>CAPYBARA_DRIVER</code>) to match your configuration (as explained in the comments).</p>

<p>Now, get the selenium server <code>.jar</code> and run it on your real machine (the host of your Vagrant) with this command:</p>

<p><code>
java -jar selenium-server-standalone-2.25.0.jar
</code></p>

<p>Now, any RSpec example with the <code>:js =&gt; true</code> metadata should be running in your Firefox browser on your real machine, where you can see it!</p>

<h3>Wrapping up</h3>

<p>We've seen how to use <strong>selenium server</strong> to allow <strong>Capybara</strong> running in a <strong>Vagrant box</strong> to use the host's <strong>browsers</strong> to run <strong>RSpec</strong> specs requiring <strong>Javascript</strong>.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">the main source for my custom configuration</a></li>
<li><a href="http://jeffkreeftmeijer.com/2011/capybara-ate-swinger/">more on how capybara allows to select a driver from the examples in RSpec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup development environment with Vagrant]]></title>
    <link href="http://www.softr.li/blog/2012/08/07/setup-development-environment-with-vagrant/"/>
    <updated>2012-08-07T21:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/08/07/setup-development-environment-with-vagrant</id>
    <content type="html"><![CDATA[<h3>Install Vagrant</h3>

<p>First, we want to install Vagrant on our development machine. Go to <a href="http://vagrantup.com/">the Vagrant website</a> and download the latest binaries for your OS. If there is no binary package available, you can install it through Rubygems using <code>gem install vagrant</code>, but Vagrant's guide tells us binaries are the best choice.</p>

<h3>Download your first Vagrant virtual machine</h3>

<p>To build its development environments, Vagrant relies on Virtual Box virtual machines with a barebones OS installation. We will work with the common Ubuntu 10.04.3 LTS, also known as Lucid Lynx. So we have to download the corresponding Vagrant box, which is done by:</p>

<p><code>
$ vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
</code></p>

<p>This box is a fully functional Ubuntu Lucid machine with 512MB of RAM. As soon as the command ends, we're ready to go on.</p>

<p><em>Note that if you are already using Vagrant and added this box before, you should already be ready for the next part.</em></p>

<h3>Configuring the project to use the Vagrant box</h3>

<p>Go to your project's directory, and run this to init Vagrant with the project:</p>

<p><code>
$ vagrant init lucid32
</code>
This will create the Vagrant's configuration file, <code>Vagrantfile</code>. The generated files contains already lots of commented commands to setup the configuration. For now, we replace this all by this:</p>

<p><code>
Vagrant::Config.run do |config|
  config.vm.box = "lucid32"
end
</code></p>

<h3>Run the Vagrant box</h3>

<p>Run <code>vagrant up</code> to setup and start the virtual machine. It can't do much for now, but it starts! If everything is good, you should see this finish message:</p>

<p><code>
[default] VM booted and ready for use!
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- v-root: /vagrant
</code></p>

<p>However, if the process seems to stop on <code>[default] Waiting for VM to boot. This can take a few minutes.</code> you may have the same issue I had with Vagrant not achieving to connect to the virtual machine with the default network configuration (NAT). There is <a href="https://github.com/mitchellh/vagrant/issues/455">an issue on Github</a> related to this problem. The cause of this issue is currently unclear, but on my system adding this to the <code>Vagrantfile</code> has made it work without any hickup for several months:</p>

<p>```</p>

<h1>Tries to fix issue #455</h1>

<p>  config.vm.customize ["modifyvm", :id, "--rtcuseutc", "on"]
  config.ssh.max_tries = 10
```</p>

<h3>Preparing the environment</h3>

<p>From now, the box you installed is not provisionned with any server software. To do so, the best way is to have built a set of Chef or Puppet recipes (or cookbook) that you will specify into <code>Vagrantfile</code>. Doing so, <code>vagrant up</code> will provision the required environment in one single step. We won't cover this subject in here, since it focuses on setting up Vagrant itself. If you want some help to setup Chef for example, I wrote several articles on the subject, check <a href="http://www.softr.li/blog/categories/vagrant/">the vagrant category</a>.</p>

<h3>References</h3>

<p><a href="http://docs.puppetlabs.com/puppet_core_types_cheatsheet.pdf">http://docs.puppetlabs.com/puppet_core_types_cheatsheet.pdf</a>
<a href="https://github.com/example42/puppet-modules">https://github.com/example42/puppet-modules</a>
<a href="http://www.example42.com/">http://www.example42.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running guard over Vagrant]]></title>
    <link href="http://www.softr.li/blog/2012/07/21/running-guard-over-vagrant/"/>
    <updated>2012-07-21T18:05:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/21/running-guard-over-vagrant</id>
    <content type="html"><![CDATA[<p>To keep it simple, you can't... do it properly. File events are not correctly triggered by VirtualBox on the guest when the files are updated from the host (see the related Github <a href="https://github.com/guard/listen/issues/53">issue</a>). So <strong>guard cannot detect the events issued by the host</strong>... unless you run it with the polling option:</p>

<p><code>
vagrant -p
</code></p>

<p>This polling option works correctly on the latest versions of VirtualBox (there was an <a href="https://github.com/guard/guard/issues/269">issue</a> before 4.1.12), but it remains a bad option because doing so my <strong>system's CPU instantly goes to a constant 100% charge</strong>.</p>

<p>To <strong>improve the situation</strong>, you can still <strong>reduce the latency</strong> so that the polling is not done so frequently. This naturally adds some delay before the triggering of the events, but it will keep your system cool.</p>

<p><code>
guard -p -l 10
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to update VirtualBox Guest Additions on a Vagrant virtual machine]]></title>
    <link href="http://www.softr.li/blog/2012/07/21/softrli-update-virtual-box-guest-additions/"/>
    <updated>2012-07-21T18:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/21/softrli-update-virtual-box-guest-additions</id>
    <content type="html"><![CDATA[<h4>How to</h4>

<p><code>
wget -c http://download.virtualbox.org/virtualbox/4.1.18/VBoxGuestAdditions_4.1.18.iso
sudo mount VBoxGuestAdditions_4.1.18.iso -o loop /mnt
sudo sh /mnt/VBoxLinuxAdditions.run --nox11
</code></p>

<p>At this point, <strong>you may encounter an error</strong> saying you need to specify <code>KERN_dir</code>. I spent some time finding what was required, finally after running all the following package installations it worked!</p>

<p><code>
sudo apt-get install linux-headers-generic
sudo apt-get install dkms gcc
sudo apt-get install linux-headers-2.6.32-38-generic
</code></p>

<p>I assume the most important is <code>dkms</code> and the appropriate <code>linux-headers-...</code> package. <strong>Check the log message</strong> provided with the error, it may indicate which package version has to be installed.</p>

<p><strong>Do not worry for the <code>Installing the Window System drivers ...fail!</code></strong> error message, this is no issue we have no window system on a vagrant box.</p>

<h4>References</h4>

<ul>
<li><a href="http://till.klampaeckel.de/blog/archives/155-VirtualBox-Guest-Additions-and-vagrant.html">till.klampaeckel.de/blog/archives/155-VirtualBox-Guest-Additions-and-vagrant.html</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1684185">ubuntuforums.org/showthread.php?t=1684185</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef recipe to install a PostgreSQL server on a machine configured with en_US locales]]></title>
    <link href="http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales/"/>
    <updated>2012-05-22T00:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales</id>
    <content type="html"><![CDATA[<p>If you have tried to install a PostgreSQL server on a Vagrant box and you're not an english-native, you may have faced an UTF8 issue:</p>

<p><code>
CREATE DATABASE db_mydb OWNER my_user ENCODING 'UTF8' TEMPLATE template1;
createdb: database creation failed: ERROR:  encoding UTF8 does not match locale en_US
DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1
</code></p>

<p>This is due to your Vagrant base box being configured with <code>en_US</code> locales. When the PostgreSQL server is installed, it is configured according to these locales, and gets an <code>en_US</code> config which is not compatible with <code>UTF8</code> encoding databases.</p>

<!-- more -->


<p>Manually, you would change your server's locales before running the PostgreSQL installation.</p>

<p>To do this using Chef, this will take you 2 additional steps.</p>

<h3>1. Configure the machine's locales permanently</h3>

<p>An approach which worked for me is to add a <code>/etc/profile.d/lang.sh</code> file which will configure your shell with the appropriate locale-related environment variables. Here is the template script:</p>

<p><code>bash lang.sh
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
</code></p>

<p>Once this is done, you need to run some commands on the server to prepare the locale files:</p>

<p><code>
locale-gen en_US.UTF-8
dpkg-reconfigure locales
</code></p>

<p>I've build a small cookbook as part of my <a href="https://github.com/rchampourlier/vagrant-stacks">vagrant-stacks</a> repo, you can find it <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/set_locale">there</a>.</p>

<h3>2. Install the PostgreSQL server with the appropriate environment variables</h3>

<p>After running the locale configuration from your Chef recipe, you may want to continue with the PostgreSQL install. However, even if we've added the <code>lang.sh</code> initialization script, it hadn't the chance to be loaded yet. So the required environment variables are not set yet.</p>

<p>To ensure these environment variables get loaded when we run our <code>postgresql::server</code> recipe, we will encapsulate this call in a small recipe:</p>

<p><code>ruby
ENV['LANGUAGE'] = ENV['LANG'] = ENV['LC_ALL'] = "en_US.UTF-8"
include_recipe "postgresql::server"
</code></p>

<p>You can find this mini-recipe <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/postgresql_server_utf8">here</a> again in my vagrant-stacks repo!</p>

<p><strong>That should be all!</strong></p>

<p><em>If I forgot some step or you can't manage to get this working, do not hesitate to write a comment. I'll do my best to answer!</em></p>
]]></content>
  </entry>
  
</feed>
