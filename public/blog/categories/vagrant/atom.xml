<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-08-08T23:06:04+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup development environment with Vagrant]]></title>
    <link href="http://www.softr.li/blog/2012/08/07/setup-development-environment-with-vagrant/"/>
    <updated>2012-08-07T21:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/08/07/setup-development-environment-with-vagrant</id>
    <content type="html"><![CDATA[<h3>Install Vagrant</h3>

<p>First, we want to install Vagrant on our development machine. Go to <a href="http://vagrantup.com/">the Vagrant website</a> and download the latest binaries for your OS. If there is no binary package available, you can install it through Rubygems using <code>gem install vagrant</code>, but Vagrant's guide tells us binaries are the best choice.</p>

<h3>Download your first Vagrant virtual machine</h3>

<p>To build its development environments, Vagrant relies on Virtual Box virtual machines with a barebones OS installation. We will work with the common Ubuntu 10.04.3 LTS, also known as Lucid Lynx. So we have to download the corresponding Vagrant box, which is done by:</p>

<p><code>
$ vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
</code></p>

<p>This box is a fully functional Ubuntu Lucid machine with 512MB of RAM. As soon as the command ends, we're ready to go on.</p>

<p><em>Note that if you are already using Vagrant and added this box before, you should already be ready for the next part.</em></p>

<h3>Configuring the project to use the Vagrant box</h3>

<p>Go to your project's directory, and run this to init Vagrant with the project:</p>

<p><code>
$ vagrant init lucid32
</code>
This will create the Vagrant's configuration file, <code>Vagrantfile</code>. The generated files contains already lots of commented commands to setup the configuration. For now, we replace this all by this:</p>

<p><code>
Vagrant::Config.run do |config|
  config.vm.box = "lucid32"
end
</code></p>

<h3>Run the Vagrant box</h3>

<p>Run <code>vagrant up</code> to setup and start the virtual machine. It can't do much for now, but it starts! If everything is good, you should see this finish message:</p>

<p><code>
[default] VM booted and ready for use!
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- v-root: /vagrant
</code></p>

<p>However, if the process seems to stop on <code>[default] Waiting for VM to boot. This can take a few minutes.</code> you may have the same issue I had with Vagrant not achieving to connect to the virtual machine with the default network configuration (NAT). There is <a href="https://github.com/mitchellh/vagrant/issues/455">an issue on Github</a> related to this problem. The cause of this issue is currently unclear, but on my system adding this to the <code>Vagrantfile</code> has made it work without any hickup for several months:</p>

<p>```</p>

<h1>Tries to fix issue #455</h1>

<p>  config.vm.customize ["modifyvm", :id, "--rtcuseutc", "on"]
  config.ssh.max_tries = 10
```</p>

<h3>Preparing the environment</h3>

<p>From now, the box you installed is not provisionned with any server software. To do so, the best way is to have built a set of Chef or Puppet recipes (or cookbook) that you will specify into <code>Vagrantfile</code>. Doing so, <code>vagrant up</code> will provision the required environment in one single step. We won't cover this subject in here, since it focuses on setting up Vagrant itself. If you want some help to setup Chef for example, I wrote several articles on the subject, check <a href="http://www.softr.li/blog/categories/vagrant/">the vagrant category</a>.</p>

<h3>References</h3>

<p><a href="http://docs.puppetlabs.com/puppet_core_types_cheatsheet.pdf">http://docs.puppetlabs.com/puppet_core_types_cheatsheet.pdf</a>
<a href="https://github.com/example42/puppet-modules">https://github.com/example42/puppet-modules</a>
<a href="http://www.example42.com/">http://www.example42.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running guard over Vagrant]]></title>
    <link href="http://www.softr.li/blog/2012/07/21/running-guard-over-vagrant/"/>
    <updated>2012-07-21T18:05:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/21/running-guard-over-vagrant</id>
    <content type="html"><![CDATA[<p>To keep it simple, you can't... do it properly. File events are not correctly triggered by VirtualBox on the guest when the files are updated from the host (see the related Github <a href="https://github.com/guard/listen/issues/53">issue</a>). So <strong>guard cannot detect the events issued by the host</strong>... unless you run it with the polling option:</p>

<p><code>
vagrant -p
</code></p>

<p>This polling option works correctly on the latest versions of VirtualBox (there was an <a href="https://github.com/guard/guard/issues/269">issue</a> before 4.1.12), but it remains a bad option because doing so my <strong>system's CPU instantly goes to a constant 100% charge</strong>.</p>

<p>To <strong>improve the situation</strong>, you can still <strong>reduce the latency</strong> so that the polling is not done so frequently. This naturally adds some delay before the triggering of the events, but it will keep your system cool.</p>

<p><code>
guard -p -l 10
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to update VirtualBox Guest Additions on a Vagrant virtual machine]]></title>
    <link href="http://www.softr.li/blog/2012/07/21/softrli-update-virtual-box-guest-additions/"/>
    <updated>2012-07-21T18:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/21/softrli-update-virtual-box-guest-additions</id>
    <content type="html"><![CDATA[<h4>How to</h4>

<p><code>
wget -c http://download.virtualbox.org/virtualbox/4.1.18/VBoxGuestAdditions_4.1.18.iso
sudo mount VBoxGuestAdditions_4.1.18.iso -o loop /mnt
sudo sh /mnt/VBoxLinuxAdditions.run --nox11
</code></p>

<p>At this point, <strong>you may encounter an error</strong> saying you need to specify <code>KERN_dir</code>. I spent some time finding what was required, finally after running all the following package installations it worked!</p>

<p><code>
sudo apt-get install linux-headers-generic
sudo apt-get install dkms gcc
sudo apt-get install linux-headers-2.6.32-38-generic
</code></p>

<p>I assume the most important is <code>dkms</code> and the appropriate <code>linux-headers-...</code> package. <strong>Check the log message</strong> provided with the error, it may indicate which package version has to be installed.</p>

<p><strong>Do not worry for the <code>Installing the Window System drivers ...fail!</code></strong> error message, this is no issue we have no window system on a vagrant box.</p>

<h4>References</h4>

<ul>
<li><a href="http://till.klampaeckel.de/blog/archives/155-VirtualBox-Guest-Additions-and-vagrant.html">till.klampaeckel.de/blog/archives/155-VirtualBox-Guest-Additions-and-vagrant.html</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1684185">ubuntuforums.org/showthread.php?t=1684185</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef recipe to install a PostgreSQL server on a machine configured with en_US locales]]></title>
    <link href="http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales/"/>
    <updated>2012-05-22T00:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales</id>
    <content type="html"><![CDATA[<p>If you have tried to install a PostgreSQL server on a Vagrant box and you're not an english-native, you may have faced an UTF8 issue:</p>

<p><code>
CREATE DATABASE db_mydb OWNER my_user ENCODING 'UTF8' TEMPLATE template1;
createdb: database creation failed: ERROR:  encoding UTF8 does not match locale en_US
DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1
</code></p>

<p>This is due to your Vagrant base box being configured with <code>en_US</code> locales. When the PostgreSQL server is installed, it is configured according to these locales, and gets an <code>en_US</code> config which is not compatible with <code>UTF8</code> encoding databases.</p>

<!-- more -->


<p>Manually, you would change your server's locales before running the PostgreSQL installation.</p>

<p>To do this using Chef, this will take you 2 additional steps.</p>

<h3>1. Configure the machine's locales permanently</h3>

<p>An approach which worked for me is to add a <code>/etc/profile.d/lang.sh</code> file which will configure your shell with the appropriate locale-related environment variables. Here is the template script:</p>

<p><code>bash lang.sh
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
</code></p>

<p>Once this is done, you need to run some commands on the server to prepare the locale files:</p>

<p><code>
locale-gen en_US.UTF-8
dpkg-reconfigure locales
</code></p>

<p>I've build a small cookbook as part of my <a href="https://github.com/rchampourlier/vagrant-stacks">vagrant-stacks</a> repo, you can find it <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/set_locale">there</a>.</p>

<h3>2. Install the PostgreSQL server with the appropriate environment variables</h3>

<p>After running the locale configuration from your Chef recipe, you may want to continue with the PostgreSQL install. However, even if we've added the <code>lang.sh</code> initialization script, it hadn't the chance to be loaded yet. So the required environment variables are not set yet.</p>

<p>To ensure these environment variables get loaded when we run our <code>postgresql::server</code> recipe, we will encapsulate this call in a small recipe:</p>

<p><code>ruby
ENV['LANGUAGE'] = ENV['LANG'] = ENV['LC_ALL'] = "en_US.UTF-8"
include_recipe "postgresql::server"
</code></p>

<p>You can find this mini-recipe <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/postgresql_server_utf8">here</a> again in my vagrant-stacks repo!</p>

<p><strong>That should be all!</strong></p>

<p><em>If I forgot some step or you can't manage to get this working, do not hesitate to write a comment. I'll do my best to answer!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant-stacks, a provision-on-demand tool for Vagrant!]]></title>
    <link href="http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant/"/>
    <updated>2012-05-20T09:42:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://www.vagrantup.com">Vagrant</a> is really an excellent tool for building and using virtual machines for your development environment. It <strong>ease the maintenance</strong> and allows to <strong>share the same environment within the whole team</strong>.</p>

<p>However, <strong>Vagrant itself only provides you with barebones boxes</strong>.  You still have to work for provisioning the box, <strong>which requires that you build a Chef recipe</strong> (or Puppet, but I'm using Chef so I will only refer to this one).</p>

<p><strong>Instead of using a packaged box</strong> (e.g. from <a href="[http://vagrantbox.es">vagrantbox.es</a>) which you may <strong>not trust or feal comfortable with</strong>, you can use <a href="https://github.com/rchampourlier/vagrant-stacks">this repo</a> to <strong>build and package your Vagrant box by yourself</strong>. It provides the tools and some configurations which will enable you to build a provisioned box without writing the recipe! The advantage of this approach over packaged boxes is that you can <strong>review how the box is built and provisioned</strong>. You can even refine the configurations and build new ones by forking the repo and submitting pull requests!</p>

<p>It already provides a configuration for a <strong>Ruby 1.9.2-p290 stack, managed with rbenv and Bundler, plus a PostgreSQL 8.4 database and MongoDB</strong>.</p>

<p>So feel free to <strong>try and share new configurations</strong>! Enjoy!</p>
]]></content>
  </entry>
  
</feed>
