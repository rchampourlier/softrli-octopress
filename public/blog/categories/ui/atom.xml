<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ui | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/ui/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-05-10T13:11:40+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging TabBarKit, a barebones kit for custom tab bar on iOS]]></title>
    <link href="http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios/"/>
    <updated>2012-05-10T12:36:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios</id>
    <content type="html"><![CDATA[<p>For our <a href="http://itunes.apple.com/fr/app/cultimots-un-jeu-culture-vocabulaire/id483710651?l=fr&amp;ls=1&amp;mt=8">Cultimots</a> application, I wanted to customize the application's tab bar. I looked a little on Google, <a href="http://cocoacontrols.com/">cocoacontrols.com</a>, Github, but I didn't want to use a full-featured solution which may not remain configurable for what I add in mind.</p>

<p>I finally went for <strong>TabBarKit</strong>, which is quite barebones, <strong>reproducing the basic features of <code>UITabBar</code></strong> while letting me <strong>play with the code to get my own thing</strong>.</p>

<p>On this way I encountered several time-consuming issues due to the non-existent documentation of TabBarKit and some bugs in the shared code. Since I already customized the code to fit my own project <strong>I won't share the updated source code</strong>, I will however share the issues I met and the solutions I found. Hope this will make your path faster than mine!</p>

<!--more -->


<h3>Confusion between tab bar style and tab bar item selection style</h3>

<p>There is a confusion between the tab bar's style, which is a <code>TBKTabBarStyle</code>, and the tab bar item selection's style, which is a <code>TBKTabBarItemSelectionStyle</code>.</p>

<p>This confusion is explicit in these lines:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarController.m:119
TBKTabBarItem *tabItem = [[[TBKTabBarItem alloc] initWithImageName:controller.tabImageName style:self.tabBarStyle tag:tagIndex title:controller.title] autorelease];
</code></p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:170
-(id) initWithImageName:(NSString *)anImageName style:(TBKTabBarItemSelectionStyle)aStyle tag:(NSInteger)aTag title:(NSString *)aTitle {
</code></p>

<p>The tab bar item <code>init</code> method expects <code>aStyle</code> to be a <code>TBKTabBarItemSelectionStyle</code> but the controller provides its own style, which is a <code>TBKTabBarStyle</code>. This is OK in the source code because in fact the both style are <code>enum</code>s with matching integer values. If you add yours, just be sure to clean this mess.</p>

<h2>Enabling titles</h2>

<p>In the source code from the Github repo, titles are disabled. To restore them, you will have to uncomment some lines from <code>TabBarKit/Classes/TBKTabBarItem.m</code>:</p>

<p><code>``objc TabBarKit/Classes/TBKTabBarItem.m:178-188</code>
if (self.controllerTitle &amp;&amp; self.selectionStyle == TBKTabBarItemDefaultSelectionStyle) {</p>

<pre><code>    /*
    self.displayTitle = YES;
    self.titleLabel.font = [UIFont boldSystemFontOfSize:10.0];
    self.titleLabel.textAlignment = UITextAlignmentCenter;
    self.titleLabel.contentMode = UIViewContentModeLeft;
    self.imageEdgeInsets = UIEdgeInsetsMake(0, 22, 11, 0);
    self.titleEdgeInsets = UIEdgeInsetsMake(0, -35, 2, 0);
    [self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
    */
}
</code></pre>

<p>```</p>

<p>There is also a bug on this line:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];
</code></p>

<p>If you set the title for both <code>UIControlStateNormal</code> and <code>UIControlStateSelected</code>, it won't show up for the tab bar items which are not selected, and their layout will get broken. Just replace the line by this:</p>

<p><code>objc TabBarKit/Classes/TBKTabBarItem.m:186
[self setTitle:self.controllerTitle forState:(UIControlStateNormal)];
</code></p>

<p><strong>I think you should have passed the first issues. The rest should be customization now! Have fun!</strong></p>
]]></content>
  </entry>
  
</feed>
