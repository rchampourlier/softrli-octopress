<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubyonrails | softr.li]]></title>
  <link href="http://www.softr.li/blog/categories/rubyonrails/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-11-08T12:17:51+01:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capybara using Selenium, with RSpec, in the Vagrant (remotely)]]></title>
    <link href="http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely/"/>
    <updated>2012-11-08T12:00:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/11/08/capybara-selenium-rspec-vagrant-remotely</id>
    <content type="html"><![CDATA[<h3>Let's assume:</h3>

<ul>
<li>you're using RSpec for your tests,</li>
<li>you use Capybara for your integration/acceptance specs,</li>
<li>you run your tests in a Vagrant box.</li>
</ul>


<p>Let's also say everything is working fine (I won't deal with any issue you may have before this point).</p>

<p>Now, <strong>you have some features / user stories / whatever that requires some Javascript action</strong>.</p>

<h3>Well.</h3>

<p><strong>If you weren't using Vagrant</strong>, I'd say everything should go fine too. Just append <code>:js =&gt; true</code> to your RSpec example, it will use Selenium and everything will go fine using your installed Firefox binary.</p>

<p>But <strong>you're testing in a Vagrant box</strong>. So here's what you'll get:</p>

<p>```
Failure/Error: visit "/whatever"</p>

<pre><code> Selenium::WebDriver::Error::WebDriverError:
   Could not find Firefox binary (os=linux). Make sure Firefox is installed or set the path manually with Selenium::WebDriver::Firefox::Binary.path=
</code></pre>

<p>```</p>

<h3>So you may say, fine, let's install Firefox!</h3>

<p>But... your Vagrant box is meant to be <strong>used in headless mode</strong>, and Firefox requires something to draw on. Still, you may have it to work. But I'll assume (again) that <strong>you don't want to bother with setting things for the client-side of the test on the development/test box</strong> (which is more server-side) <strong>, and use everything that's already on you real development machine</strong> (your day-to-day browsers).</p>

<p><em>If my assumption is false, you can have a look to <a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">this article</a>, which explains both approaches (but not for RSpec, that's the why of this article).</em></p>

<h3>The solution? selenium server!</h3>

<p>What you want is Capybara to use its selenium driver, but <strong>instead of running a local copy of the browser</strong>, use <a href="http://seleniumhq.org/download/">selenium server</a> which will <strong>allows Capybara to use browsers running in your real development machine</strong> (the host of your Vagrant development box).</p>

<h3>Ok I got it, how do I do it?</h3>

<p><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">This article</a> is pretty well made, with far more explanations that I provide, so I encourage you to have a look to fully understand how it works. However, <strong>it doesn't provide the solution if you're using RSpec</strong>, since it builds a simple <code>Unit::TestCase</code> example.</p>

<p><strong>This is where I truly do something.</strong></p>

<h3>Here's how to get it working with RSpec (and even in Spork)</h3>

<p>Add this one line in your <code>spec_helper.rb</code> file (one line?!!!):</p>

<p><code>
  require_relative 'support/capybara_remote'
</code></p>

<p>After the <code>require 'capybara/rspec'</code> would be great. If you're using Spork, it should be in the <code>prefork</code> block.</p>

<p>Well, not truly a one-liner. Add this to a <code>spec/support/capybara_remote.rb</code> file too:</p>

<p><div><script src='https://gist.github.com/4038197.js?file='></script>
<noscript><pre><code># SELENIUM_SERVER is the IP address or hostname of the system running Selenium
# Server, this is used to determine where to connect to when using one of the
# selenium_remote_* drivers
SELENIUM_SERVER = &quot;10.10.11.1&quot;

# SELENIUM_APP_HOST is the IP address or hostname of this system (where the
# tests run against) as reachable for the SELENIUM_SERVER. This is used to set
# the Capybara.app_host when using one of the selenium_remote_* drivers
SELENIUM_APP_HOST = &quot;10.10.11.2&quot;

# CAPYBARA_DRIVER is the Capybara driver to use, this defaults to Selenium with
# Firefox
CAPYBARA_DRIVER = &quot;selenium_remote_firefox&quot;

# At this point, Capybara.default_driver is :rack_test, and
# Capybara.javascript_driver is :selenium. We can't run :selenium in the Vagrant box,
# so we set the javascript driver to :selenium_remote_firefox which we're going to
# configure.
Capybara.javascript_driver = :selenium_remote_firefox

RSpec.configure do |config|

  config.before(:each) do
    if selenium_remote?
      Capybara.app_host = &quot;http://#{SELENIUM_APP_HOST}:#{page.driver.rack_server.port}&quot;
    end
  end

  config.after(:each) do
    Capybara.reset_sessions!
    Capybara.use_default_driver
    Capybara.app_host = nil
  end

  # Determines if a selenium_remote_* driver is being used
  def selenium_remote?
    !(Capybara.current_driver.to_s =~ /\Aselenium_remote/).nil?
  end
end

# Set the default driver to CAPYBARA_DRIVER, when you change the driver in one
# of your tests resetting it to the default will ensure that its reset to what
# you specified when starting the tests.
#Capybara.default_driver = CAPYBARA_DRIVER.to_sym

# CapybaraDriverRegistrar is a helper class that enables you to easily register
# Capybara drivers
class CapybaraDriverRegistrar

  # register a Selenium driver for the given browser to run on the localhost
  def self.register_selenium_local_driver(browser)
    Capybara.register_driver &quot;selenium_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: browser)
    end
  end

  # register a Selenium driver for the given browser to run with a Selenium
  # Server on another host
  def self.register_selenium_remote_driver(browser)
    Capybara.register_driver &quot;selenium_remote_#{browser}&quot;.to_sym do |app|
      Capybara::Selenium::Driver.new(app, browser: :remote, url: &quot;http://#{SELENIUM_SERVER}:4444/wd/hub&quot;, desired_capabilities: browser)
    end
  end
end

# Register various Selenium drivers
CapybaraDriverRegistrar.register_selenium_remote_driver(:firefox)</code></pre></noscript></div>
</p>

<p>Be sure to adjust the constants (<code>SELENIUM_SERVER</code>, <code>SELENIUM_APP_HOST</code>, <code>CAPYBARA_DRIVER</code>) to match your configuration (as explained in the comments).</p>

<p>Now, get the selenium server <code>.jar</code> and run it on your real machine (the host of your Vagrant) with this command:</p>

<p><code>
java -jar selenium-server-standalone-2.25.0.jar
</code></p>

<p>Now, any RSpec example with the <code>:js =&gt; true</code> metadata should be running in your Firefox browser on your real machine, where you can see it!</p>

<h3>Wrapping up</h3>

<p>We've seen how to use <strong>selenium server</strong> to allow <strong>Capybara</strong> running in a <strong>Vagrant box</strong> to use the host's <strong>browsers</strong> to run <strong>RSpec</strong> specs requiring <strong>Javascript</strong>.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.without-brains.net/blog/2012/08/01/capybara-and-selenium-with-vagrant/">the main source for my custom configuration</a></li>
<li><a href="http://jeffkreeftmeijer.com/2011/capybara-ate-swinger/">more on how capybara allows to select a driver from the examples in RSpec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cropping with live preview in Rails, using Jcrop]]></title>
    <link href="http://www.softr.li/blog/2012/10/19/image-cropping-with-live-preview-in-rails/"/>
    <updated>2012-10-19T11:50:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/10/19/image-cropping-with-live-preview-in-rails</id>
    <content type="html"><![CDATA[<p>Well, thanks to the <a href="http://railscasts.com/episodes/182-cropping-images">Jcrop Railscast</a>, I had setup <strong>avatar upload and cropping features</strong> on <a href="http://www.avdice.com">our project</a>.</p>

<p>With the major changes coming in our next release, this little feature <strong>wasn't working anymore</strong>, and I couldn't figure why my preview was working like a mess...</p>

<p>I looked into the code, which matches the <a href="http://deepliquid.com/projects/Jcrop/demos.php?demo=thumbnail">Jcrop's original example</a>, but I couldn't figure what was wrong! Wow, but that's a pretty simple thing, no? Just scaling and offsetting a picture, shouldn't take long to understand?!</p>

<p>Well, the code wasn't looking good enough. I'm undertaking <a href="https://www.edx.org/courses/BerkeleyX/CS169.1x/2012_Fall/about">edX SAAS course</a> so I want my code to be <em>beautiful</em>. So, let's rewrite it!</p>

<h3>The context</h3>

<ul>
<li>I want a <strong>simple cropping feature</strong>, using Paperclip just like the one setup in the Railscast, and the <strong>live preview</strong>.</li>
<li>I just need to crop to a <strong>square picture</strong>.</li>
<li>I want it to work!</li>
</ul>


<p>I won't rewrite the whole tutorial, since the Railscast is perfect to setup your model with Paperclip, add the cropper module, but the Javascript with preview was a wreck, and that's what I rewrote.</p>

<h3>The Javascript</h3>

<p>```
:javascript</p>

<p>  var previewSize = 150;
  var originalSize = {</p>

<pre><code>width: #{@user.avatar_geometry(:original).width},
height: #{@user.avatar_geometry(:original).height}
</code></pre>

<p>  };</p>

<p>  function updatePreview(coords) {</p>

<pre><code>var ratio = previewSize / coords.w;

$('#preview').css({
  width: Math.round(originalSize.width * ratio) + 'px',  
  height: Math.round(originalSize.height * ratio) + 'px',  
  marginLeft: '-' + Math.round(coords.x * ratio) + 'px',  
  marginTop: '-' + Math.round(coords.y * ratio) + 'px'  
});

$('#profile_crop_x').val(Math.floor(coords.x));  
$('#profile_crop_y').val(Math.floor(coords.y));  
$('#profile_crop_w').val(Math.floor(coords.w));  
$('#profile_crop_h').val(Math.floor(coords.h));    
</code></pre>

<p>  };</p>

<p>  $(function() {</p>

<pre><code>$('#cropbox').Jcrop({
  onChange: updatePreview,  
  onSelect: updatePreview,  
  setSelect: [0, 0, originalSize.width * 0.9, originalSize.height * 0.9],  
  aspectRatio: 1
});
</code></pre>

<p>  });
```</p>

<p>I think this version makes more sense, and in my case it works perfectly. I used some drawings to help me rewriting this, so you may find it helpful, in particular if you want something to start with if you don't just want a square target size!</p>

<p><img src="https://s3-eu-west-1.amazonaws.com/softrli/assets/2012-10-19-image-cropping-with-live-preview-in-rails-asset-1.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup automatic clearing of your Rails sessions]]></title>
    <link href="http://www.softr.li/blog/2012/07/05/setup-automatic-clearing-of-your-rails-sessions/"/>
    <updated>2012-07-05T09:40:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/07/05/setup-automatic-clearing-of-your-rails-sessions</id>
    <content type="html"><![CDATA[<p>With every connection to your application of a new user, bot or whatever, Rails will create a new session object.</p>

<p>If you're using <a href="http://api.rubyonrails.org/classes/ActiveRecord/SessionStore.html">ActiveRecord::SessionStore</a> to save your sessions in your database, your database may already be alarmingly growing in size, due to the number of sessions it contains.</p>

<h3>The rake db:sessions:clear task</h3>

<p>If you don't mind a lot about your users loosing their session, you can simply use the provided <code>rake db:sessions:clear</code> task. It will simply delete all sessions in the database. Side-effect: all current sessions are deleted, so signed in users get signed out, and you should hope they had nothing under way!</p>

<h3>A more user-friendly solution</h3>

<p>Writing a simple rake task to replace the default one and only remove sessions older than 2 weeks is as easy as adding this file to your project:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/tasks/sessions.rake  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:sessions</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  desc &quot;Clear expired sessions (more than 2 weeks old)&quot;</span>
</span><span class='line'><span class="sr">  task :cleanup =&gt; :environment do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;DELETE FROM sessions WHERE (updated_at &amp;lt; &#39;</span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="si">}</span><span class="s2">&#39;)&quot;</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, if you run <code>rake sessions:cleanup</code>, only the older sessions will be removed from your database.</p>

<h3>Last but not least: automation</h3>

<p>So that you don't have to run it every day, you can setup a cron task to do it for you. Here is the line we use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>crontab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>m h  dom mon dow   command&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>01 3 * * * bash -l -c 'cd /home/deployer/rails/project/current; bundle exec rake sessions:cleanup'</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>References</h3>

<ul>
<li><a href="http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions">http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Bootstrap within your Rails 3.1+ app]]></title>
    <link href="http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app/"/>
    <updated>2012-06-07T12:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/bootstrap">Bootstrap</a> is a real gift from Twitter. It provides a good deal of packaged, well-designed and simple to use UI components for any web application.</p>

<p>I wanted to use it for quite some time, but I hadn't found the time nor the project to apply it on. I recently updated an administration web-app for one of my project, and I felt it was the good time.</p>

<p>So here are my first feedbacks and tips on how to integrated Bootstrap with Rails (I'm on Rails 3.2.5, it's the lowest-effort path if you're using Formtastic too).</p>

<!-- more -->


<h3>First, where do I put the files?</h3>

<p>Say you want to use <a href="http://twitter.github.com/bootstrap">Twitter Bootstrap</a> within your Rails 3.1+ (ie. asset pipeline featured) application.</p>

<p>After some tests I couldn't find a simple way to <strong>keep the whole bootstrap directory packaged and get it accessed correctly by the asset pipeline</strong>. So the best way I found yet is to <strong>explode it into the appropriate directories</strong>:</p>

<ul>
<li>CSS files goes into <code>vendor/assets/stylesheets</code></li>
<li>JS files goes into <code>vendor/assets/javascripts</code></li>
<li>image files goes into <code>vendor/assets/images</code></li>
</ul>


<p>So this way I can simply require Bootstrap CSS through this <code>application.css</code> file:</p>

<p><code>css app/assets/application.css
/*
 * This is a manifest file that'll automatically include all the stylesheets available in this directory
 * and any sub-directories. You're free to add application-wide styles to this file and they'll appear at
 * the top of the compiled file, but it's generally better to create a new file per style scope.
 *= require_self
 *= require_tree .
 *= require bootstrap
*/
</code></p>

<p>If this does not work, be sure to <strong>restart your development server</strong> as changing location of assets may not be taken into account until restart...</p>

<h3>This breaks my tasty forms!</h3>

<p>Are you using <a href="https://github.com/justinfrench/formtastic">Formtastic</a>? I am, this is one of the things I like to have with every Rails project. However, Formtastic and Bootstrap do not naturally go together well.</p>

<p>To make them love each other, we have to add a gem which will tweak the way Formtastic builds the forms to make them Bootstrap-proof. This is the intent of <a href="https://github.com/rchampourlier/formtastic-bootstrap">formtastic-bootstrap</a>.</p>

<p>You can add this to your Gemfile, that should be all:</p>

<p><code>
gem 'formtastic-bootstrap', :git =&gt; 'https://github.com/rchampourlier/formtastic-bootstrap.git', :branch =&gt; 'bootstrap2-rails3-2-formtastic-2-2-1'
</code>
<em>This assumes your on Rails 3.2 and Formtastic 2.2.1, as the branch name indicates.</em></p>

<p>I've sent you to my own fork which is forking an already long chain of forks. The <a href="https://github.com/mjbellantoni/formtastic-bootstrap">original repo</a> seems not to be maintained anymore. My fork provides a <code>bootstrap2-rails3-2-formtastic-2-2-1</code> branch which should work for Rails 3.2 and the current version of Formtastic, the 2.2.1 (some changes were to be taken into account from 2.2.0).</p>

<p><em>My fork does not take all 2.2.1 changes into account. You may have issues with <code>time_select</code> inputs...</em></p>

<h3>My flash messages aren't that nice!</h3>

<p>To style your Rails' flash messages using the nice Bootstrap's alert style, you can have a look to this <a href="https://gist.github.com/2887844">gist</a>:</p>

<p><div><script src='https://gist.github.com/2887844.js?file='></script>
<noscript><pre><code>- if flash
  - flash.each do |level, message|
    %div{:class =&gt; &quot;alert #{flash_level(level)}&quot;}
      %button.close{:&quot;data-dismiss&quot; =&gt; 'alert'}= &quot;×&quot;
      = message</code></pre></noscript></div>
</p>

<p>Just replace your current way of displaying the flashes in your template with this, and you're done!</p>

<p><code>ruby
= render :partial =&gt; 'layouts/flash', :locals =&gt; { :flash =&gt; flash }
</code></p>

<hr />

<p><em>I hope this helps, do not hesitate if you see mistakes or some parts which require additional details!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding SSL on some pages of your Rails application]]></title>
    <link href="http://www.softr.li/blog/2012/03/23/adding-ssl-on-some-pages-of-your-rails-application/"/>
    <updated>2012-03-23T09:49:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/03/23/adding-ssl-on-some-pages-of-your-rails-application</id>
    <content type="html"><![CDATA[<p>This tutorial should help you to setup SSL on your <em>staging</em> and <em>production</em> servers as well as update your Rails application to require SSL for specific controller actions.</p>

<!-- more -->


<h2>Generate a self-signed certificate to test on your staging server</h2>

<p>We start by creating a self-signed certificate you will be able to use on your test/staging server, before buying a real certificate and configuring your production machine with it.</p>

<h3>The terminal commands</h3>

<p><em>On your server console</em></p>

<pre><code>openssl genrsa -aes256 -out server.key 2048 # step 1
openssl req -new -key server.key -out server.csr # step 2
mv server.key server.key.bak # step 3
openssl rsa -in server.key.bak -out server.key # step 4
sudo openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt # step 5
</code></pre>

<h3>What does it do?</h3>

<ol>
<li>Generates a private/public key pair</li>
<li>Creates a certificate request

<ul>
<li>You <strong>must</strong> fill every requested field unless it is marked optional.</li>
<li>In France, you should use the name of the "departement" to fill the <em>State or Province Name</em>.</li>
<li>Use your company name for <em>Organization Name</em>.</li>
<li>Be sure to fill the chosen website domain name for <em>Common Name</em>. <strong>Don't fill your personal name for a website SSL certificate request!</strong></li>
</ul>
</li>
<li>Copies the passphrase-protected private key to <code>server.key.bak</code>.</li>
<li>Removes the passphrase from the private key. You have to do this, so that it won't be needed when starting the webserver. Since this is probably done automatically (at server boot or through automatic management tools), you won't be there to enter the passphrase. <strong>Be sure however that your private key is secure (root user access only), and revoke it as soon as you think it was compromised.</strong> <em>If you didn't remove it, <code>server.key.bak</code> contains your passphrase-protected key, while <code>server.key</code> is the passphrase-free one.</em></li>
<li>Generates the self-signed certificate.</li>
</ol>


<h3>How to fill, example for a company in Paris, France</h3>

<ul>
<li>Country Name: FR</li>
<li>State or Province Name: Paris</li>
<li>Locality Name: Paris</li>
<li>Organization Name: Avdice</li>
<li>Organizational Unit Name: IT Service</li>
<li>Common Name: www.website.com</li>
<li>Email Address: mail@website.com</li>
</ul>


<p><em>Nothing for challenge password and optional company name.</em></p>

<h2>Generate the Certificate Signing Request to get a real SSL certificate for your production server</h2>

<p>The process is exactly the same as the one above, except you do not do step 5. You will buy a certificate from a provider, send it the CSR file you've created thanks to the steps 1 and 2, and it will provide you with the certificate.</p>

<h3>Generate the chained certificate file</h3>

<p>Some certification authorities used to issue your certificate may not be known by the browser. To ensure the browser correctly recognize your certificate as valid, you have to complete your certificate by appending the intermediate authorities' certificates.</p>

<p>Your SSL provider should have sent you with your certificate file the required intermediate certificates and the order in which they are to be used. For example, for a PositiveSSL certificate here is an extract of the email containing the certificate:</p>

<ul>
<li>Root CA Certificate - AddTrustExternalCARoot.crt</li>
<li>Intermediate CA Certificate - PositiveSSLCA2.crt</li>
<li>Your PositiveSSL Certificate - www_website_com.crt</li>
</ul>


<p>To generate our chained certificate file, we have to concatenate the provided certificates <strong>in the order of the certification, starting from your certificate to the root one</strong>.</p>

<p>Here are the commands we use with the previous example:</p>

<p><code>
cat www_website_com.crt &gt; server.crt
cat PositiveSSLCA2.crt &gt;&gt; server.crt
cat AddTrustExternalCARoot.crt &gt;&gt; server.crt
</code></p>

<h2>Move the files to the correct place</h2>

<ul>
<li>For a self-signed certificate (staging), the <code>server.crt</code> file is the one you generated during the procedure.</li>
<li><p>For a true certificate (production), the <code>server.crt</code> is the chained-certificate file you generated thanks to the previous section guide.</p>

<p>  sudo mv server.crt /etc/ssl/certs/application_name.crt
  sudo mv server.key /etc/ssl/private/application_name.key</p></li>
</ul>


<h2>Change the permissions of the files to make them safe</h2>

<pre><code>sudo chown root:ssl-cert /etc/ssl/private/application_name.key
sudo chmod 0600 /etc/ssl/private/application_name.key
sudo chown root:root /etc/ssl/certs/application_name.crt
sudo chmod 0600 /etc/ssl/certs/application_name.crt 
</code></pre>

<h2>Update the configuration of your webserver to add a SSL host</h2>

<p><em>This tutorial is written for nginx v0.7.65. It's quite old but it's the default package on Ubuntu 10.04.3 LTS. I however recommend you to update it by installing it directly from the source, it's quite easy! Still, the tutorial should be valid for a newer version too...</em></p>

<p>Adding the SSL host to your nginx configuration file essentially means to add the following lines:</p>

<pre><code>server {
    listen &lt;%= app_port_ssl %&gt;;
    client_max_body_size 500M;
    server_name &lt;%= server_name %&gt;;
    ssl                     on;
    ssl_certificate         /etc/ssl/certs/application_name.crt;
    ssl_certificate_key     /etc/ssl/private/application_name.key;
    ssl_session_timeout     5m;

    [...remaining configuration]
}
</code></pre>

<p>You have to make some changes for the location you're proxying to Rails too.</p>

<p>In our case, we have this root location:</p>

<pre><code>location / {
  # Returns file if it exists, else send to app server's location
  try_files $uri @app_server;
}
</code></pre>

<p>Our standard (ie. HTTP) <code>@app_server</code> location is defined like this:</p>

<pre><code>location @app_server {
  proxy_set_header X-Forwarded-For$proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_pass http://&lt;%= application %&gt;_app_server;
}
</code></pre>

<p>The one for SSL is like this:</p>

<pre><code>location @app_server {
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto https;
  proxy_set_header Host $http_host;
  proxy_pass http://&lt;%= application %&gt;_app_server;
  proxy_redirect off;
  proxy_max_temp_file_size 0;
}
</code></pre>

<p>You see some additional proxy directives, in particular <code>proxy_set_header X-Forwarded-Proto https;</code>, they ensure that Rails can correctly detect the request was made through HTTPS, not HTTP.</p>

<p>The remaining configuration may be a copy of your HTTP server configuration, in which case your server will do both HTTP and HTTPS the same way, or a specific configuration if you want to process different locations, perform redirections, etc.</p>

<h2>Update Rails application to require SSL for specific actions</h2>

<p>Our goal is to have only specific controller actions requiring SSL. We don't want everything to be secured, this would unnecessarily increase our server's load.</p>

<p>We assume that our webserver-level configuration (nginx in our case) is not managing HTTP/HTTPS routing (we could do this through webserver rules, however we consider that this is business/app-level related, so this should be done at app-level).</p>

<p><em>This tutorial is made for Rails 3.0.x (tested with 3.0.12)</em></p>

<h3>Install <code>ssl_requirement</code> gem</h3>

<p>Use this fork: <a href="https://github.com/bartt/ssl_requirement">https://github.com/bartt/ssl_requirement</a> and follow the guide.</p>

<p><strong>If you want the short way...</strong></p>

<p>Add to your Gemfile</p>

<pre><code>gem 'bartt-ssl_requirement', '~&gt;1.4.0', :require =&gt; 'ssl_requirement'
</code></pre>

<h3>Configure Devise for SSL</h3>

<p>Add the following code at the bottom of your <code>Application</code> class definition within <code>config/application.rb</code>:</p>

<pre><code>config.to_prepare do
  Devise::RegistrationsController.ssl_required :new, :create
  Devise::SessionsController.ssl_required :new, :create
end
</code></pre>

<p>Add to your <code>ApplicationController</code></p>

<pre><code>include ::SslRequirement
</code></pre>

<p>For any other controller action you want SSL, add this  to your controller class:</p>

<pre><code>ssl_required :action_name
</code></pre>

<h3>Review routes when SSL is required</h3>

<p>You probably don't want to limit all your secured routes to SSL. In most cases, it's better if you don't, so that the user gets a redirection when he tries to access through <code>http</code> a route with ssl required.</p>

<p>However, you can't do so for <code>POST</code> routes: redirection won't work, since it will redirect to a <code>GET</code>. For these routes, you can add the SSL constraint on the route, so that the user get a <code>404</code> error when he tries to mess with the URL's protocol!</p>

<p>If you're using Devise, you'll probably want to do this for you <code>user_registration</code> and <code>user_session</code> <code>POST</code> routes.</p>

<p>You will have to override Devise's defaults routes for <code>sessions</code> and <code>registrations</code> controllers. For the override, you'll use:</p>

<pre><code>devise_for  :users, 
  :skip =&gt; [:registrations, :sessions]
</code></pre>

<p>This simply tells Devise to skip the registrations and sessions routes, as you'll give them yourself to enforce the SSL requirement.</p>

<p>And now, you create these routes by yourself:</p>

<p>``` ruby</p>

<pre><code>devise_scope :user do
  scope '/users' do

    # Setting up registrations routes manually for https on create
    get '/cancel',        :to =&gt; 'devise/registrations#cancel', :as =&gt; :cancel_user_registration
    post '',              :to =&gt; 'devise/registrations#create',
                          :constraints =&gt; { :protocol =&gt; secured_protocol },
                          :as =&gt; :user_registration
    get '/sign_up',       :to =&gt; 'devise/registrations#new', :as =&gt; :new_user_registration
    get '/edit',          :to =&gt; 'devise/registrations#edit', :as =&gt; :edit_user_registration
    put '',               :to =&gt; 'devise/registrations#update'
    delete '',            :to =&gt; 'devise/registrations#destroy'

    # Sessions routes for https on create
    get '/sign_in',       :to =&gt; 'devise/sessions#new', :as =&gt; :new_user_session
    post '/sign_in',      :to =&gt; 'devise/sessions#create', :as =&gt; :user_session,
                          :constraints =&gt; { :protocol =&gt; secured_protocol }
    delete '/sign_out',   :to =&gt; 'devise/sessions#destroy', :as =&gt; :destroy_user_session
  end
end
</code></pre>

<p>```</p>

<h2>Change your links to go <code>https</code></h2>

<p>This involves using the <code>_url</code> helper instead of the <code>_path</code> one, and adding this option: <code>:protocol =&gt; "https"</code>.</p>

<p>Be sure to change the url of forms matching SSL-enabled routes, or you'll get <code>404</code>s!</p>

<h2>Testing</h2>

<p>You should now be able to test this configuration with your browser. You will need to deploy your updated app to a staging machine, unless your development is SSL-capable.</p>

<h3>With a self-signed SSL certificate (on staging)</h3>

<p>The browser <strong>will</strong> complain that the certificate is not valid. It's normal, since it is not signed by a valid certificate authority. <strong>You are indeed the certificate authority</strong> (remember, it's self-signed), and <strong>you are not known by the browser as a valid certificate authority!</strong></p>

<h3>With a true SSL certificate (on production)</h3>

<p>You may encounter some issues with your browser recognizing the issued certificate. The browser may complain it is signed by an unknown authority. This may happen when an unknown intermediate certification authority is used.</p>

<p>You can use this service to check your server is sending the expected certificate chain: <a href="http://www.sslshopper.com/ssl-checker.html">http://www.sslshopper.com/ssl-checker.html</a></p>

<p>If the certificate chain is not valid, check again the <em>Generating the chained certificate file</em> section.</p>

<h2>References</h2>

<ul>
<li><a href="http://wiki.nginx.org/HttpSslModule">http://wiki.nginx.org/HttpSslModule</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
