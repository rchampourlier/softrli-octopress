<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[softr.li]]></title>
  <link href="http://www.softr.li/atom.xml" rel="self"/>
  <link href="http://www.softr.li/"/>
  <updated>2012-06-11T11:37:13+02:00</updated>
  <id>http://www.softr.li/</id>
  <author>
    <name><![CDATA[Romain Champourlier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XCode failing when building for archiving because of a missing library link]]></title>
    <link href="http://www.softr.li/blog/2012/06/11/xcode-failing-when-building-for-archiving-because-of-a-missing-library-link/"/>
    <updated>2012-06-11T11:07:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/11/xcode-failing-when-building-for-archiving-because-of-a-missing-library-link</id>
    <content type="html"><![CDATA[<h3>The issue</h3>

<p>You may be using opensource libraries within your iOS project. (<em>If you don&#8217;t, you should, it&#8217;s a great time-saver. Check <a href="http://pinterest.com/rchampourlier/best-ios-controls/">here</a> for some starters.</em>)</p>

<p>As you may know, XCode may sometimes become really painful when dealing with the <strong>compilation and linking of external libraries</strong>. It may just work fine when compiling for development, but when you want it compiled for distribution, XCode may just not agree anymore.</p>

<p>I just faced such an issue this morning. This time, I met the <code>ld: library not found for...</code> error:</p>

<p><img src="http://www.softr.li/images/2012-06-11-screenshot-1.png"></p>

<!-- more -->


<p>Googling a little, I found these two StackOverflow answers, but they could not help me. You can give a try, this may still contain the answer to your own issue.</p>

<h3>The solution</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/5584317/compile-build-or-archive-problems-with-xcode-4-and-dependancies">Compile, Build or Archive problems with Xcode 4 (and dependancies)</a></li>
<li><a href="http://stackoverflow.com/questions/6004919/missing-library-link-error-when-doing-product-build-for-archiving-in-xcode-4">Missing Library link error when doing Product > Build For Archiving in Xcode 4</a></li>
</ul>


<p>I checked where the generated could be, and looking at the logs of the build process, I could find the directory&#8217;s path: <code>/Users/me/Library/Developer/Xcode/DerivedData/.../</code></p>

<p>Checking the content of this directory, I discovered that my issue was that the library was indeed not build for the <code>Distribution-iphoneos</code> configuration:</p>

<p><img src="http://www.softr.li/images/2012-06-11-screenshot-2.png"></p>

<p>Correcting the issue was as simple as going to the library&#8217;s project settings and adding the <code>Distribution</code> configuration:</p>

<p><img src="http://www.softr.li/images/2012-06-11-screenshot-3.png"></p>

<h3>The conclusion</h3>

<p>Be sure to check that the libraries you include within your XCode project have all the necessary configurations setup!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Bootstrap within your Rails 3.1+ app]]></title>
    <link href="http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app/"/>
    <updated>2012-06-07T12:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/06/07/how-to-use-bootstrap-within-your-rails-3.1-app</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/bootstrap">Bootstrap</a> is a real gift from Twitter. It provides a good deal of packaged, well-designed and simple to use UI components for any web application.</p>

<p>I wanted to use it for quite some time, but I hadn&#8217;t found the time nor the project to apply it on. I recently updated an administration web-app for one of my project, and I felt it was the good time.</p>

<p>So here are my first feedbacks and tips on how to integrated Bootstrap with Rails (I&#8217;m on Rails 3.2.5, it&#8217;s the lowest-effort path if you&#8217;re using Formtastic too).</p>

<!-- more -->


<h3>First, where do I put the files?</h3>

<p>Say you want to use <a href="http://twitter.github.com/bootstrap">Twitter Bootstrap</a> within your Rails 3.1+ (ie. asset pipeline featured) application.</p>

<p>After some tests I couldn&#8217;t find a simple way to <strong>keep the whole bootstrap directory packaged and get it accessed correctly by the asset pipeline</strong>. So the best way I found yet is to <strong>explode it into the appropriate directories</strong>:</p>

<ul>
<li>CSS files goes into <code>vendor/assets/stylesheets</code></li>
<li>JS files goes into <code>vendor/assets/javascripts</code></li>
<li>image files goes into <code>vendor/assets/images</code></li>
</ul>


<p>So this way I can simply require Bootstrap CSS through this <code>application.css</code> file:</p>

<figure class='code'><figcaption><span>app/assets/application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c"> * This is a manifest file that&#39;ll automatically include all the stylesheets available in this directory</span>
</span><span class='line'><span class="c"> * and any sub-directories. You&#39;re free to add application-wide styles to this file and they&#39;ll appear at</span>
</span><span class='line'><span class="c"> * the top of the compiled file, but it&#39;s generally better to create a new file per style scope.</span>
</span><span class='line'><span class="c"> *= require_self</span>
</span><span class='line'><span class="c"> *= require_tree . </span>
</span><span class='line'><span class="c"> *= require bootstrap</span>
</span><span class='line'><span class="c">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this does not work, be sure to <strong>restart your development server</strong> as changing location of assets may not be taken into account until restart&#8230;</p>

<h3>This breaks my tasty forms!</h3>

<p>Are you using <a href="https://github.com/justinfrench/formtastic">Formtastic</a>? I am, this is one of the things I like to have with every Rails project. However, Formtastic and Bootstrap do not naturally go together well.</p>

<p>To make them love each other, we have to add a gem which will tweak the way Formtastic builds the forms to make them Bootstrap-proof. This is the intent of <a href="https://github.com/rchampourlier/formtastic-bootstrap">formtastic-bootstrap</a>.</p>

<p>You can add this to your Gemfile, that should be all:</p>

<figure class='code'><figcaption><span>app/assets/application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">gem</span> <span class="s1">&#39;formtastic-bootstrap&#39;</span><span class="o">,</span> <span class="nd">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/rchampourlier/formtastic-bootstrap.git&#39;</span><span class="o">,</span> <span class="nd">:branch</span> <span class="o">=&gt;</span> <span class="s1">&#39;bootstrap2-rails3-2-formtastic-2-2-1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>This assumes your on Rails 3.2 and Formtastic 2.2.1, as the branch name indicates.</em></p>

<p>I&#8217;ve sent you to my own fork which is forking an already long chain of forks. The <a href="https://github.com/mjbellantoni/formtastic-bootstrap">original repo</a> seems not to be maintained anymore. My fork provides a <code>bootstrap2-rails3-2-formtastic-2-2-1</code> branch which should work for Rails 3.2 and the current version of Formtastic, the 2.2.1 (some changes were to be taken into account from 2.2.0).</p>

<p><em>My fork does not take all 2.2.1 changes into account. You may have issues with <code>time_select</code> inputs&#8230;</em></p>

<h3>My flash messages aren&#8217;t that nice!</h3>

<p>To style your Rails&#8217; flash messages using the nice Bootstrap&#8217;s alert style, you can have a look to this <a href="https://gist.github.com/2887844">gist</a>:</p>

<div><script src='https://gist.github.com/2887844.js?file='></script>
<noscript><pre><code>- if flash
  - flash.each do |level, message|
    %div{:class =&gt; &quot;alert #{flash_level(level)}&quot;}
      %button.close{:&quot;data-dismiss&quot; =&gt; 'alert'}= &quot;Ã—&quot;
      = message</code></pre></noscript></div>


<p>Just replace your current way of displaying the flashes in your template with this, and you&#8217;re done!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;layouts/flash&#39;</span><span class="p">,</span> <span class="ss">:locals</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:flash</span> <span class="o">=&gt;</span> <span class="n">flash</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><em>I hope this helps, do not hesitate if you see mistakes or some parts which require additional details!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppleScript to automate the setup of your development space]]></title>
    <link href="http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space/"/>
    <updated>2012-05-26T16:34:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/26/applescript-to-automate-the-setup-of-your-development-space</id>
    <content type="html"><![CDATA[<p>Today is Saturday, and like every week-end, I&#8217;m getting a little lazy.</p>

<p>Say you&#8217;re working on a Rails project on MacOS X. If you&#8217;re like me, you like to have a terminal window for your project with several tabs:</p>

<ul>
<li>one for typing various commands,</li>
<li>one with your <code>spork</code> process,</li>
<li>one with your <code>rails console</code>,</li>
<li>and one with your <code>rails server</code>.</li>
</ul>


<p>Starting all this little world already involves some keystrokes and typing, even more if you&#8217;re using Vagrant (which <a href="http://www.softr.li/blog/categories/vagrant/">I&#8217;m using for a week</a> and is really awesome).</p>

<p>So why not use the simple tools provided by Apple to have this setup with a single action?</p>

<!-- more -->


<h2>The AppleScript</h2>

<p>AppleScript is the scripting solution provided by Apple and it&#8217;s perfect for what we want to do. It&#8217;s quite simple, and it allows you to script the Terminal application.</p>

<p>Here is the script:</p>

<div><script src='https://gist.github.com/2794125.js?file='></script>
<noscript><pre><code>-- This script enables you to use MacOS X AppleScript to open a terminal
-- window and several tabs to:
--   - load a vagrant box with vagrant up
--   - ssh in the box on each tab
--   - run specific commands within the vagrant box on different tabs
--
-- For example, open 4 tabs, each within the vagrant box, one with spork,
-- one with a Rails console and the last one with the rails server.
--
-- It assumes when you ssh into the vagrant box you automatically cd into
-- the project's directory (by having a `cd /vagrant` within your
-- `~/.bashrc` on the box for example).
--
-- It also uses a `dev-project` alias on the host which cd in the appropriate
-- project's directory, but you can just replace it by a `cd ...` command.

using terms from application &quot;Terminal&quot;
  tell application &quot;Terminal&quot;
    activate
    
    -- open the terminal's window, set its dimensions   
    set tab1 to do script
    do script &quot;dev-project&quot; in tab1
    do script &quot;vagrant up&quot; in tab1
    repeat
      delay 0.5
      if busy of tab1 is false then exit repeat
    end repeat
    
    -- tab 1: ssh in vagrant
    do script &quot;vagrant ssh&quot; in tab1
    delay 0.5
    
    -- tab 2: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab2 to tab 2 of currentWindow
    do script &quot;dev-project&quot; in tab2
    do script &quot;vagrant ssh&quot; in tab2
    do script &quot;bundle exec spork&quot; in tab2
    delay 0.5
    
    -- tab 3: ssh in vagrant and run rails console
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab3 to tab 3 of currentWindow
    do script &quot;dev-project&quot; in tab3
    do script &quot;vagrant ssh&quot; in tab3
    do script &quot;bundle exec rails console&quot; in tab3
    delay 0.5
    
    -- tab 4: ssh in vagrant and run spork
    tell application &quot;System Events&quot; to keystroke &quot;t&quot; using command down &amp; return
    set tab4 to tab 4 of currentWindow
    do script &quot;dev-project&quot; in tab4
    do script &quot;vagrant ssh&quot; in tab4
    do script &quot;bundle exec rails server&quot; in tab4
  end tell
end using terms from</code></pre></noscript></div>


<p>It&#8217;s intended for my use, so it relies on some aliases I&#8217;ve defined on my host machine. But it&#8217;s quite simple to read and comes with some comments, so I&#8217;m sure you will have no difficulty to adapt it to your needs.</p>

<h2>Access the script</h2>

<p>You can run this script from a Terminal window by using <code>osascript path/to/the/script.scpt</code>, but I prefer to have it in the script menu.</p>

<p>You can activate the script menu from the script editor&#8217;s preferences. Then just have a look in the menu to open the user&#8217;s scripts directory and put your script file in it.</p>

<hr />

<p><em>If you need any help, just ask!</em></p>

<p><em>If you&#8217;re aware of a better solution to setup a development environment like this, don&#8217;t hesitate to tell me! I&#8217;m pretty sure there are some other ways I don&#8217;t know yet&#8230;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forked TabBarKit]]></title>
    <link href="http://www.softr.li/blog/2012/05/24/forked-tabbarkit/"/>
    <updated>2012-05-24T16:52:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/24/forked-tabbarkit</id>
    <content type="html"><![CDATA[<p>I have had to rewrite some parts of TBKTabBarController since I needed to be able to programmatically select a tab. This is normally possible by setting the <code>selectedIndex</code> or the <code>selectedViewController</code> property of the tab bar controller, but this was not working with TabBarKit.</p>

<p>I investigated and detected this behavior was not implemented, so I decided to complete it myself.</p>

<p>Along the way, I discovered there were some issues with the <code>containerView</code> being mixed up with the <code>TBKTabBarController</code>&#8217;s view, so I also corrected these bugs.</p>

<p>I&#8217;ve forked the repository and updated it with my corrected code, so have a look to this <a href="https://github.com/rchampourlier/TabBarKit">repo</a> if you need this.</p>

<p>Oh, I also added a <code>TBKTabBarStyleTwiceHeight</code> I use to double the size of the tab bar on iPad, so you get this for free too ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef recipe to install a PostgreSQL server on a machine configured with en_US locales]]></title>
    <link href="http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales/"/>
    <updated>2012-05-22T00:00:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/22/chef-recipe-to-install-a-postgresql-server-on-a-machine-configured-with-en_us-locales</id>
    <content type="html"><![CDATA[<p>If you have tried to install a PostgreSQL server on a Vagrant box and you&#8217;re not an english-native, you may have faced an UTF8 issue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE db_mydb OWNER my_user ENCODING 'UTF8' TEMPLATE template1;
</span><span class='line'>createdb: database creation failed: ERROR:  encoding UTF8 does not match locale en_US
</span><span class='line'>DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1</span></code></pre></td></tr></table></div></figure>


<p>This is due to your Vagrant base box being configured with <code>en_US</code> locales. When the PostgreSQL server is installed, it is configured according to these locales, and gets an <code>en_US</code> config which is not compatible with <code>UTF8</code> encoding databases.</p>

<!-- more -->


<p>Manually, you would change your server&#8217;s locales before running the PostgreSQL installation.</p>

<p>To do this using Chef, this will take you 2 additional steps.</p>

<h3>1. Configure the machine&#8217;s locales permanently</h3>

<p>An approach which worked for me is to add a <code>/etc/profile.d/lang.sh</code> file which will configure your shell with the appropriate locale-related environment variables. Here is the template script:</p>

<figure class='code'><figcaption><span>lang.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span><span class="s2">&quot;en_US.UTF-8&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s2">&quot;en_US.UTF-8&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span><span class="s2">&quot;en_US.UTF-8&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once this is done, you need to run some commands on the server to prepare the locale files:</p>

<figure class='code'><figcaption><span>lang.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>locale-gen en_US.UTF-8
</span><span class='line'>dpkg-reconfigure locales
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve build a small cookbook as part of my <a href="https://github.com/rchampourlier/vagrant-stacks">vagrant-stacks</a> repo, you can find it <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/set_locale">there</a>.</p>

<h3>2. Install the PostgreSQL server with the appropriate environment variables</h3>

<p>After running the locale configuration from your Chef recipe, you may want to continue with the PostgreSQL install. However, even if we&#8217;ve added the <code>lang.sh</code> initialization script, it hadn&#8217;t the chance to be loaded yet. So the required environment variables are not set yet.</p>

<p>To ensure these environment variables get loaded when we run our <code>postgresql::server</code> recipe, we will encapsulate this call in a small recipe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;LANGUAGE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;LANG&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;LC_ALL&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;en_US.UTF-8&quot;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;postgresql::server&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find this mini-recipe <a href="https://github.com/rchampourlier/vagrant-stacks/tree/master/cookbooks_local/postgresql_server_utf8">here</a> again in my vagrant-stacks repo!</p>

<p><strong>That should be all!</strong></p>

<p><em>If I forgot some step or you can&#8217;t manage to get this working, do not hesitate to write a comment. I&#8217;ll do my best to answer!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant-stacks, a provision-on-demand tool for Vagrant!]]></title>
    <link href="http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant/"/>
    <updated>2012-05-20T09:42:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/20/vagrant-stacks-a-provision-on-demand-tool-for-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://www.vagrantup.com">Vagrant</a> is really an excellent tool for building and using virtual machines for your development environment. It <strong>ease the maintenance</strong> and allows to <strong>share the same environment within the whole team</strong>.</p>

<p>However, <strong>Vagrant itself only provides you with barebones boxes</strong>.  You still have to work for provisioning the box, <strong>which requires that you build a Chef recipe</strong> (or Puppet, but I&#8217;m using Chef so I will only refer to this one).</p>

<p><strong>Instead of using a packaged box</strong> (e.g. from <a href="[http://vagrantbox.es">vagrantbox.es</a>) which you may <strong>not trust or feal comfortable with</strong>, you can use <a href="https://github.com/rchampourlier/vagrant-stacks">this repo</a> to <strong>build and package your Vagrant box by yourself</strong>. It provides the tools and some configurations which will enable you to build a provisioned box without writing the recipe! The advantage of this approach over packaged boxes is that you can <strong>review how the box is built and provisioned</strong>. You can even refine the configurations and build new ones by forking the repo and submitting pull requests!</p>

<p>It already provides a configuration for a <strong>Ruby 1.9.2-p290 stack, managed with rbenv and Bundler, plus a PostgreSQL 8.4 database and MongoDB</strong>.</p>

<p>So feel free to <strong>try and share new configurations</strong>! Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organization for provisioning your environments (from dev to prod) with Chef]]></title>
    <link href="http://www.softr.li/blog/2012/05/19/organization-for-provisioning-your-environments-from-dev-to-prod-with-chef/"/>
    <updated>2012-05-19T11:56:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/19/organization-for-provisioning-your-environments-from-dev-to-prod-with-chef</id>
    <content type="html"><![CDATA[<p>When you start developping a project with a team, you may start facing issues requiring you to share the same development environment. I just discovered <a href="www.vagrantup.com">Vagrant</a> and it&#8217;s the perfect solution for doing this.</p>

<p>Vagrant is nice, but it stills requires you to provision your machine with the needed language stacks, services, etc. This is why it&#8217;s provided with a way to hook into Chef or Puppet.</p>

<p><em>I&#8217;ll go with Chef because I had already given it a try sometime ago, and config files are written in Ruby, which I know.</em></p>

<p>Since you&#8217;re going to build recipes and/or cookbooks <strong>to provision your development machine, what about going a little further and using Chef to provision your staging/production machines too?</strong></p>

<!-- more -->


<p>There will be differences between your development and staging/production setups. However, you will have to install the same databases, maybe some background processors and some other services, so most of the provisioning that you will prepare for your development machine can be reused to provision your staging/production machines too.</p>

<h3>Purpose</h3>

<p>The purpose of this tutorial <strong>is not to be a complete walkthrough</strong> for doing this, since this would involve explaining how to build Chef recipes/cookbooks, running Chef-Solo, etc. It only intends to let you imagine what you could do to ease your provisioning process, knowing the tools exist and they can be used like this. Plus I propose a simple organization for your configuration files that may help you with it.</p>

<h3>Tools</h3>

<h4>Chef</h4>

<p>Chef is a configuration manager which will read a recipe and use cookbooks to perform operations on a given machine (or node).</p>

<p>It has several architectures:</p>

<ul>
<li><strong>Chef Client/Server</strong>: the node performing the operations is the Chef Client and the operations to be performed are determined thanks to a Chef Server. This solution provides some advantages because the server can remember some information on the state of each node. Opscode provides an <a href="http://www.opscode.com/hosted-chef/">Hosted Chef Server</a> for free up to 5 nodes.</li>
<li><strong>Chef Solo</strong>: the node performing the operations is running Chef Solo and the operations to be performed are defined by local files (or a <code>tgz</code> which can be downloaded from somewhere). It&#8217;s the fast way, and should be sufficient for provisioning your development machines and a few staging/production machines.</li>
</ul>


<p>For the installation of any of the two solutions, please refer to <a href="http://www.opscode.com/chef/">Opscode&#8217;s documentation</a>. For your Vagrant machines, no installation needed, everything is already <a href="http://vagrantup.com/docs/getting-started/provisioning.html">hooked in</a>.</p>

<h4>Puppet</h4>

<p>An alternative for Chef is Puppet, which can be hooked into Vagrant too. I won&#8217;t detail it since I never tried it&#8230;</p>

<h4>Librarian</h4>

<p><a href="https://github.com/applicationsonline/librarian">Librarian</a> is a useful tool which will help you bundle your cookbooks.</p>

<p>To build your recipe and provisioning configuration, you will rely on cookbooks, most of them defined and shared by the community. You will find many on Github, the main repositories being provided by <a href="https://github.com/opscode-cookbooks/">Opscode</a>.</p>

<p>With Librarian you build a <code>Cheffile</code> and the principle is almost the same as Bundler for gems: you list the required cookbooks, you can specify their location and the version you want to use, and Librarian will gather them for you, ensuring the correct version of the cookbook is fetched, so that you won&#8217;t get a broken version if it gets updated.</p>

<p>Once you&#8217;ve created the <code>Cheffile</code>, it&#8217;s almost as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install librarian
</span><span class='line'>librarian-chef install</span></code></pre></td></tr></table></div></figure>


<h3>Organization</h3>

<p>How to organize all this for the provisioning of machines related to your project? Here&#8217;s my approach, starting with the files-tree:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ project
</span><span class='line'>  + machines
</span><span class='line'>    + cookbooks
</span><span class='line'>      ...
</span><span class='line'>      &lt;the cookbooks directories generated by Librarian&gt;
</span><span class='line'>      ...
</span><span class='line'>      + cookbooks_local
</span><span class='line'>        + project
</span><span class='line'>          + recipes
</span><span class='line'>            - default.rb
</span><span class='line'>            - development.rb
</span><span class='line'>            - staging.rb
</span><span class='line'>            - production.rb
</span><span class='line'>          - metadata.json
</span><span class='line'>      + operations
</span><span class='line'>        - provision_development.json
</span><span class='line'>        - provision_staging.json
</span><span class='line'>        - provision_production.json
</span><span class='line'>      + roles
</span><span class='line'>        - base.json
</span><span class='line'>        - databases.json
</span><span class='line'>        - maintenance.json
</span><span class='line'>        - ruby.json
</span><span class='line'>      - Cheffile
</span><span class='line'>      - Cheffile.lock
</span><span class='line'>      - solo.rb</span></code></pre></td></tr></table></div></figure>


<h4><code>cookbooks</code></h4>

<p>This is the directory of cookbooks generated by Librarian according to the content of your <code>Cheffile</code>.</p>

<p>Please notice the <code>Cheffile.lock</code> file which will keep the references to the cookbooks versions you have actually installed. This allows you to restore the <code>cookbooks</code> directory with the same versions of the cookbooks even if you did not specified particular versions of the cookbooks. This way, you don&#8217;t need to commit your <code>cookbooks</code> directory with your versioning system.</p>

<h4><code>cookbooks_local</code></h4>

<p>This directory contains the cookbooks you maintain yourself and that you will use to setup your own environments.</p>

<p>Inside, I have a <code>project</code> cookbook containing recipes for any of the different environments I have to setup: development, staging, production.</p>

<p>The best way to build this cookbook is to look at others, and customize as needed. I have a <code>metadata.json</code> which describes the cookbook. I&#8217;m not sure it&#8217;s required, but I think it&#8217;s better to have it.</p>

<h4><code>operations</code></h4>

<p>When you want Chef to perform operations on a node, you provide it with a <em>run list</em> and some <em>attributes</em>. For Chef Client/Server, this is defined on the server. For Chef Solo, you generally provide the <code>chef-solo</code> command with a JSON file (often named <code>dna.json</code>).</p>

<p>Here instead of one <code>dna.json</code> file, I keep several files allowing me to run different sets of operations. For example here is the content of my <code>provision_development.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;run_list&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;role[base]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;role[ruby]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;role[databases]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[project::development]&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;ruby_stack&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;rubies&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;1.9.2-p290&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;global&quot;</span><span class="o">:</span> <span class="s2">&quot;1.9.2-p290&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;users&quot;</span><span class="o">:</span> <span class="s2">&quot;vagrant&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;postgresql&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;postgres&quot;</span><span class="o">:</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file provides Chef-Solo with a run list, which will run several roles (defined in the different JSON files under <code>roles</code> and described in the next paragraph), recipes, and define the attributes that may be required by the different recipes.</p>

<p>Why several configuration files? Because for my production environment, I will want to run another role: <code>role[maintenance]</code>  which will provision a set of tools to help me with maintenance tasks, and use another recipe for the project&#8217;s specific provisioning: <code>recipe[project::production]</code>.</p>

<h4><code>roles</code></h4>

<p>The roles are a simple concept allowing you to bundle a set of recipes together.</p>

<p>Here is our <code>base.json</code> role file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;base&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Base role applied to all nodes.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;chef_type&quot;</span><span class="o">:</span> <span class="s2">&quot;role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;json_class&quot;</span><span class="o">:</span> <span class="s2">&quot;Chef::Role&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;run_list&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[apt]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[build-essential]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[git]&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it allows us to group several recipes depending on the role of the machine:</p>

<ul>
<li><code>base</code> will be provisioned on all nodes,</li>
<li><code>ruby</code> will be provisioned for nodes requiring it,</li>
<li><code>databases</code> will be provisioned for nodes acting as databases servers,</li>
<li>etc.</li>
</ul>


<h4>Cheffile</h4>

<p>That&#8217;s the file used by Librarian to get the required cookbooks. It takes this form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">site</span> <span class="s2">&quot;http://community.opscode.com/api/v1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cookbook</span> <span class="s2">&quot;apt&quot;</span>
</span><span class='line'><span class="nx">cookbook</span> <span class="s1">&#39;build-essential&#39;</span>
</span><span class='line'><span class="nx">cookbook</span> <span class="s1">&#39;git&#39;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">cookbook</span> <span class="s1">&#39;ruby_build&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">:</span><span class="nx">git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/fnichol/chef-ruby_build.git&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">:</span><span class="nx">ref</span> <span class="o">=&gt;</span> <span class="s1">&#39;v0.6.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line starting with <code>site</code> allows you to get the cookbooks from Opscode community easily. You can also specify a location (git, local), for the cookbooks not available on this community. Just check <a href="https://github.com/applicationsonline/librarian">Librarian&#8217;s documentation</a>.</p>

<h4><code>solo.rb</code></h4>

<p>That&#8217;s the configuration file we use to run Chef-Solo. Here is the content for this configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="nx">chef</span><span class="o">-</span><span class="nx">solo</span> <span class="o">-</span><span class="nx">c</span> <span class="p">.</span><span class="o">/</span><span class="nx">solo</span><span class="p">.</span><span class="nx">rb</span> <span class="o">-</span><span class="nx">j</span> <span class="p">.</span><span class="o">/</span><span class="nx">operations</span><span class="o">/</span><span class="nx">operation</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="nx">file_cache_path</span> <span class="s2">&quot;/tmp/chef&quot;</span>
</span><span class='line'><span class="nx">cookbook_path</span> <span class="p">[</span><span class="nx">File</span><span class="p">.</span><span class="nx">expand_path</span><span class="p">(</span><span class="s1">&#39;../cookbooks&#39;</span><span class="p">,</span> <span class="nx">__FILE__</span><span class="p">),</span> <span class="nx">File</span><span class="p">.</span><span class="nx">expand_path</span><span class="p">(</span><span class="s1">&#39;../cookbooks_local&#39;</span><span class="p">,</span> <span class="nx">__FILE__</span><span class="p">)]</span>
</span><span class='line'><span class="nx">role_path</span> <span class="s2">&quot;#{File.expand_path(&#39;../roles&#39;, __FILE__)}&quot;</span>
</span><span class='line'><span class="nx">log_level</span> <span class="o">:</span><span class="nx">info</span>
</span><span class='line'><span class="nx">log_location</span> <span class="nx">STDOUT</span>
</span><span class='line'><span class="nx">ssl_verify_mode</span> <span class="o">:</span><span class="nx">verify_none</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>cookbook_path</code> which is provided with an Array containing both the <code>cookbooks</code> and the <code>cookbooks_local</code> directories.</p>

<h3>Time to run</h3>

<p>Assuming you have Chef-Solo installed on the machine you want to run the operations on, you should be good with running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cd</span> <span class="o">&lt;</span><span class="nx">your</span><span class="o">-</span><span class="nx">project</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">machines</span>
</span><span class='line'><span class="p">[</span><span class="nx">sudo</span><span class="p">]</span> <span class="nx">chef</span><span class="o">-</span><span class="nx">solo</span> <span class="o">-</span><span class="nx">c</span> <span class="p">.</span><span class="o">/</span><span class="nx">solo</span><span class="p">.</span><span class="nx">rb</span> <span class="o">-</span><span class="nx">j</span> <span class="p">.</span><span class="o">/</span><span class="nx">operations</span><span class="o">/&lt;</span><span class="nx">operation</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to have installed the cookbooks before however (see the Librarian paragraph if you don&#8217;t now what to do).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging TabBarKit, a barebones kit for custom tab bar on iOS]]></title>
    <link href="http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios/"/>
    <updated>2012-05-10T12:36:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/05/10/debugging-tabbarkit-a-barebones-kit-for-custom-tab-bar-on-ios</id>
    <content type="html"><![CDATA[<p>For our <a href="http://itunes.apple.com/fr/app/cultimots-un-jeu-culture-vocabulaire/id483710651?l=fr&amp;ls=1&amp;mt=8">Cultimots</a> application, I wanted to customize the application&#8217;s tab bar. I looked a little on Google, <a href="http://cocoacontrols.com/">cocoacontrols.com</a>, Github, but I didn&#8217;t want to use a full-featured solution which may not remain configurable for what I add in mind.</p>

<p>I finally went for <strong>TabBarKit</strong>, which is quite barebones, <strong>reproducing the basic features of <code>UITabBar</code></strong> while letting me <strong>play with the code to get my own thing</strong>.</p>

<p>On this way I encountered several time-consuming issues due to the non-existent documentation of TabBarKit and some bugs in the shared code. Since I already customized the code to fit my own project <strong>I won&#8217;t share the updated source code</strong>, I will however share the issues I met and the solutions I found. Hope this will make your path faster than mine!</p>

<!--more -->


<h3>Confusion between tab bar style and tab bar item selection style</h3>

<p>There is a confusion between the tab bar&#8217;s style, which is a <code>TBKTabBarStyle</code>, and the tab bar item selection&#8217;s style, which is a <code>TBKTabBarItemSelectionStyle</code>.</p>

<p>This confusion is explicit in these lines:</p>

<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBarController.m:119</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TBKTabBarItem</span> <span class="o">*</span><span class="n">tabItem</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">TBKTabBarItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImageName:</span><span class="n">controller</span><span class="p">.</span><span class="n">tabImageName</span> <span class="nl">style:</span><span class="n">self</span><span class="p">.</span><span class="n">tabBarStyle</span> <span class="nl">tag:</span><span class="n">tagIndex</span> <span class="nl">title:</span><span class="n">controller</span><span class="p">.</span><span class="n">title</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBarItem.m:170</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">initWithImageName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">anImageName</span> <span class="nl">style:</span><span class="p">(</span><span class="n">TBKTabBarItemSelectionStyle</span><span class="p">)</span><span class="n">aStyle</span> <span class="nl">tag:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">aTag</span> <span class="nl">title:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">aTitle</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tab bar item <code>init</code> method expects <code>aStyle</code> to be a <code>TBKTabBarItemSelectionStyle</code> but the controller provides its own style, which is a <code>TBKTabBarStyle</code>. This is OK in the source code because in fact the both style are <code>enum</code>s with matching integer values. If you add yours, just be sure to clean this mess.</p>

<h2>Enabling titles</h2>

<p>In the source code from the Github repo, titles are disabled. To restore them, you will have to uncomment some lines from <code>TabBarKit/Classes/TBKTabBarItem.m</code>:</p>

<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBarItem.m:178-188`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">controllerTitle</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">selectionStyle</span> <span class="o">==</span> <span class="n">TBKTabBarItemDefaultSelectionStyle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     self.displayTitle = YES;</span>
</span><span class='line'><span class="cm">     self.titleLabel.font = [UIFont boldSystemFontOfSize:10.0];</span>
</span><span class='line'><span class="cm">     self.titleLabel.textAlignment = UITextAlignmentCenter;</span>
</span><span class='line'><span class="cm">     self.titleLabel.contentMode = UIViewContentModeLeft;</span>
</span><span class='line'><span class="cm">     self.imageEdgeInsets = UIEdgeInsetsMake(0, 22, 11, 0);</span>
</span><span class='line'><span class="cm">     self.titleEdgeInsets = UIEdgeInsetsMake(0, -35, 2, 0);</span>
</span><span class='line'><span class="cm">     [self setTitle:self.controllerTitle forState:(UIControlStateNormal | UIControlStateSelected)];</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is also a bug on this line:</p>

<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBarItem.m:186</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setTitle:</span><span class="n">self</span><span class="p">.</span><span class="n">controllerTitle</span> <span class="nl">forState:</span><span class="p">(</span><span class="n">UIControlStateNormal</span> <span class="o">|</span> <span class="n">UIControlStateSelected</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you set the title for both <code>UIControlStateNormal</code> and <code>UIControlStateSelected</code>, it won&#8217;t show up for the tab bar items which are not selected, and their layout will get broken. Just replace the line by this:</p>

<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBarItem.m:186</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setTitle:</span><span class="n">self</span><span class="p">.</span><span class="n">controllerTitle</span> <span class="nl">forState:</span><span class="p">(</span><span class="n">UIControlStateNormal</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Finishing touch</h2>

<h3>Grey titles for the non-selected items</h3>

<p>Update the lines 170 to 175 to have this in <code>TabBarKit/Classes/TBKTabBar.m</code>:</p>

<figure class='code'><figcaption><span>TabBarKit/Classes/TBKTabBar.m:170-175</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">TBKTabBarItem</span> <span class="o">*</span><span class="n">tab</span> <span class="k">in</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">currentBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="n">tabMargin</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tab</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">currentBounds</span><span class="p">;</span>
</span><span class='line'>  <span class="n">currentBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">currentBounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">addSubview:</span><span class="n">tab</span><span class="p">];</span>
</span><span class='line'>  <span class="n">tab</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">grayColor</span><span class="p">];</span> <span class="c1">// added line</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update the <code>setSelected:</code> method in <code>TabBarKit/Classes/TBKTabBarItem.m:213-217</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">sublayers</span> <span class="nl">containsObject:</span><span class="n">self</span><span class="p">.</span><span class="n">selectionLayer</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">selectionLayer</span> <span class="n">removeFromSuperlayer</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">grayColor</span><span class="p">];</span> <span class="c1">// added line</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Your tab bar should already look great! The rest is customization, and it&#8217;s up to you! Have fun!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manually installing a gem from a git repo]]></title>
    <link href="http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo/"/>
    <updated>2012-04-22T10:16:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/22/manually-installing-a-gem-from-a-git-repo</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem uninstall gem_name
</span><span class='line'>git clone git://github.com/repo_name/gem_name.git
</span><span class='line'>cd gem_name
</span><span class='line'>gem build gem_name.gemspec
</span><span class='line'>gem install ./&lt;the gem that was compiled&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup automatic clearing of your Rails sessions]]></title>
    <link href="http://www.softr.li/blog/2012/04/20/setup-automatic-clearing-of-your-rails-sessions/"/>
    <updated>2012-04-20T10:12:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/20/setup-automatic-clearing-of-your-rails-sessions</id>
    <content type="html"><![CDATA[<p>With every connection to your application of a new user, bot or whatever, Rails will create a new session object.</p>

<p>If you&#8217;re using <a href="http://api.rubyonrails.org/classes/ActiveRecord/SessionStore.html">ActiveRecord::SessionStore</a> to save your sessions in your database, your database may already be alarmingly growing in size, due to the number of sessions it contains.</p>

<h2>The rake db:sessions:clear task</h2>

<p>If you don&#8217;t mind a lot about your users lossing their session, you can simply use the provided <code>rake db:sessions:clear</code> task. It will simply delete all sessions in the database. Side-effect: all current sessions are deleted, so signed in users get signed out, and you should hope they had nothing under way!</p>

<h2>A more user-friendly solution</h2>

<h2>References</h2>

<ul>
<li><a href="http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions">http://blog.brightbox.co.uk/posts/clearing-out-rails-sessions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up log rotation for your web apps]]></title>
    <link href="http://www.softr.li/blog/2012/04/20/setting-up-log-rotation-for-your-web-apps/"/>
    <updated>2012-04-20T10:12:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/20/setting-up-log-rotation-for-your-web-apps</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Just ask yourself this question: did you configure your logs rotation? '>
If, like me, you simply follow the common tutorials and walthroughs to setup your production environment, you may start wondering after some weeks <strong>where this leak on your server&#8217;s disk space is coming from&#8230;</strong></p>

<p>Just ask yourself this question: did you configure your logs rotation?</p>

<p><em>(Well, that was when I was still a young CTO&#8230;)</em>
</span></p>

<!-- more -->


<h2>The ugly</h2>

<p>You&#8217;ve installed your <strong>nginx</strong> server, it proxies some well-coded <strong>Rails</strong> applications served by the nice-and-fast <strong>thin</strong> app server. All good.</p>

<p>But you know, these are verbose people. They like to talk. A lot. And as obedient software, they write every character of their chatter. So this is where your leak is coming from.</p>

<p>As a matter of fact, if you don&#8217;t tell somebody to clean their mess, nobody won&#8217;t&#8230; and you&#8217;re server will soon die of low-disk-space agony.</p>

<h2>The bad</h2>

<p>You will have to tell <code>logrotate</code> to do some work for these guys to keep their chatter under control.</p>

<p><code>logrotate</code> is the cowboy which will rule the land ;) Tell it which log has to be rotated and it will automatically does the job for you. So now, get into this configuration stage&#8230;</p>

<p>The <code>logrotate</code> configuration file should be <code>/etc/logrotate.conf</code>.</p>

<p>You can add your instructions for log rotation by adding the following lines in this file, or you can create a new file under <code>/etc/logrotate.d</code> if you think this is a more organized way (I think). This latter option mimics the way packages configure <code>logrotate</code>. You will find several examples in this directory, so you may just look at them too.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/path/to/your/rails/applicaton/log/*.log {
</span><span class='line'>  daily
</span><span class='line'>  missingok
</span><span class='line'>  rotate 7
</span><span class='line'>  compress
</span><span class='line'>  delaycompress
</span><span class='line'>  notifempty
</span><span class='line'>  copytruncate
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you want to force <code>logrotate</code> to run right now instead of waiting until tomorrow to see if your configuration is OK, you can run this command:</p>

<pre><code>/usr/sbin/logrotate -f /etc/logrotate.conf
</code></pre>

<p>Else you can just wait a little.</p>

<h2>The good</h2>

<p>If you got through all this useless blabber about bad guys chatting and cowboys, you&#8217;ll be happy to know that some serious<del>ly boring</del> (no no, just kidding, I don&#8217;t even know him) guy has written a far more efficient tutorial on the subject, and you can find it <a href="http://www.nullislove.com/2007/09/10/rotating-rails-log-files/">here</a>.</p>

<p>This guide will help you understand how <code>logrotate</code> works and the purpose of each line in the code above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linking local node modules with npm]]></title>
    <link href="http://www.softr.li/blog/2012/04/16/linking-local-node-modules-with-npm/"/>
    <updated>2012-04-16T10:10:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/16/linking-local-node-modules-with-npm</id>
    <content type="html"><![CDATA[<p>How to link a <strong>node module</strong> to a <strong>local source directory</strong> instead of installing from npm repository.</p>

<!-- more -->


<h2>Link a module to a local repo</h2>

<p>When you need a fresher version of a module that the one published to npm repository (e.g. if you have your own patch, if new commits haven&#8217;t been released yet), you may want to clone the module locally and have npm use it instead of the published one.</p>

<p>To do this, you <strong>link</strong> your local package.</p>

<pre><code>git clone https://github.com/repo/node-module.git
cd node-module
npm link
</code></pre>

<p><em>You may need to <code>sudo</code> to perform the <code>link</code> command (this is because the link gets installed system-wide, in <code>/usr/local/lib/node_modules</code> on my MacOS X system).</em></p>

<p><strong>Check the log of this command to see on which path npm references the linked module. In my case, the module was named as <code>node-module</code>, but npm was using <code>module</code> for the reference. In this case, be sure to link in your app (next section) using <code>module</code> and not <code>node-module</code>.</strong></p>

<h2>Link this module in your node application</h2>

<p>You will now tell npm to use this linked version of the module for your application:</p>

<pre><code>cd your_application
npm link module
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB CheatSheet]]></title>
    <link href="http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet/"/>
    <updated>2012-04-15T10:05:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/15/mongodb-cheatsheet</id>
    <content type="html"><![CDATA[<p>Another cheatsheet, for <strong>useful MongoDB commands</strong> to use inside the <code>mongo</code> command-line tool.</p>

<!-- more -->


<h2>Get a list of handy commands</h2>

<pre><code>help
</code></pre>

<h2>List DBs</h2>

<pre><code>show dbs
</code></pre>

<h2>Select a DB</h2>

<pre><code>use mydb
</code></pre>

<h2>Show collections</h2>

<pre><code>show collections
</code></pre>

<h2>List all documents in a collection</h2>

<pre><code>db.collectionName.find()
</code></pre>

<h2>Get a specific object in a collection</h2>

<h3>Through its index</h3>

<pre><code>var object = db.collectionName.find().toArray()[index];
</code></pre>

<h3>With a where-like clause</h3>

<p>Assuming you want to find objects matching x=1 and y=2:</p>

<pre><code>var objects = db.collectionName.find((x:1), (y:2));
</code></pre>

<h2>Update an object</h2>

<pre><code>var object.attribute = newValue;
db.collectionName.save(object);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make your own gems with Jeweler]]></title>
    <link href="http://www.softr.li/blog/2012/04/14/how-to-make-your-own-gems-with-jeweler/"/>
    <updated>2012-04-14T10:03:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/14/how-to-make-your-own-gems-with-jeweler</id>
    <content type="html"><![CDATA[<p>A really simple walkthrough on how to <strong>package a gem easily</strong> using the <strong>Jeweler</strong> gem.</p>

<!-- more -->


<h2>Prerequisites</h2>

<ul>
<li>You&#8217;re using Bundler.</li>
<li>You have <code>gem 'jeweler'</code> in your <code>Gemfile</code>.</li>
<li>You have run <code>bundle install</code>.</li>
</ul>


<h2>Add the <code>gemspec</code> task to your <code>Rakefile</code></h2>

<p>Add these lines to your <code>Rakefile</code>. This will help Jeweler to build the appropriate <code>gemspec</code> for your gem.</p>

<pre><code>begin
  require 'jeweler'
  Jeweler::Tasks.new do |gemspec|
    gemspec.name = "the_name_of_your_gem"
    gemspec.summary = "A summary for your gem"
    gemspec.description = "A description for your gem"
    gemspec.email = "your_name@your_company.com"
    gemspec.homepage = "http://an_url_for_your_gem.com"
    gemspec.authors = ["your@email.com"]
  end
rescue LoadError
  puts "Jeweler not available. Install it with: gem install jeweler"
end
</code></pre>

<h2>Package the gem</h2>

<p>To package the gem, you just have to run the <code>rake</code> task you added, and another <code>build</code> task.</p>

<pre><code>rake gemspec
rake build
</code></pre>

<h2>Include your gem hosted on Github in your Rails application</h2>

<p>Assuming your repository is commited on Github, you can easily include your gem in your Rails project using the following line in your <code>Gemfile</code>:</p>

<pre><code>gem 'your_gem_name', :git =&gt; "path_to_your_gem.git"
</code></pre>

<p>You can also specify a branch with <code>:branch =&gt; "stable"</code> and a tag with <code>:tag =&gt; "2-stable"</code>.</p>

<h2>Include your gem from a local directory</h2>

<p>You can tell Bundler to get your gem from a local directory using the <code>:path</code> parameter. The path is relative to the directory containing the <code>Gemfile</code>:</p>

<pre><code>gem "rails", :path =&gt; "vendor/rails"
</code></pre>

<h2>Directly include the library</h2>

<p><em>If you&#8217;re building a gem, that&#8217;s probably not your goal, but you can also just include an external lib without needing to package it as a gem. Just use:</em></p>

<pre><code>require 'path_to_gem/lib/gem'
</code></pre>

<h2>Hubticle tags</h2>

<p>ruby, gem, jeweler, library, module, share, github</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple cheatsheet for git submodules]]></title>
    <link href="http://www.softr.li/blog/2012/04/14/simple-cheatsheet-for-git-submodules/"/>
    <updated>2012-04-14T10:01:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/14/simple-cheatsheet-for-git-submodules</id>
    <content type="html"><![CDATA[<p>Just a cheatsheet for <strong>git and submodules</strong>.</p>

<!-- more -->


<p></p>

<h2>Steps</h2>

<ol>
<li>Add the submodule using a <code>git submodule add...</code> command (see below for the different options).</li>
<li>Run <code>git submodule init</code>.</li>
</ol>


<h2>Local submodules</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git submodule add "/absolute/path/to/the/submodule/repository" local/path/for/the/submodule</span></code></pre></td></tr></table></div></figure>


<p>To perform operations on the submodule, go in its folder. From then you can make commits and push them to the &#8216;remote&#8217; repository.</p>

<h2>Remote submodules</h2>

<p>Add a remote submodule, include external project and track updates</p>

<pre><code>git submodule add https://path_to_the_git_repository.git ./local_path_to_the_submodule_directory
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from RVM to rbenv]]></title>
    <link href="http://www.softr.li/blog/2012/04/10/moving-from-rvm-to-rbenv/"/>
    <updated>2012-04-10T09:56:00+02:00</updated>
    <id>http://www.softr.li/blog/2012/04/10/moving-from-rvm-to-rbenv</id>
    <content type="html"><![CDATA[<ul>
<li>Using <strong>rvm</strong> to manage your gemset without really knowing why since now Bundler does it very cleverly?</li>
<li>Feeling that the whole rvm system is a bit complicated?</li>
<li>Tired of having shell scripts not finding your rvm-managed gems?</li>
</ul>


<p>It looks like your ready to consider <strong>rbenv</strong>, which is a really lightweight alternative to <strong>rvm</strong>. Lightweight because it <em>just</em> manages rubies, and lets Bundler manage the gems.</p>

<!-- more -->


<h2>Why?</h2>

<p><strong>RVM</strong> is a very useful tool that helps you manage your ruby environment when you need multiple rubies and have tons of gems different for each of your projects.</p>

<p>I used <strong>RVM</strong> a long time on my development machine, however I did not bother to keep it on my production environment. Launching ruby applications through other ruby tools (e.g. God) or <code>crontab</code> was causing me headaches (loading RVM path, bundle not found, etc.). Since the gems were not managed by RVM, thanks to the excellent <a href="http://gembundler.com/">Bundler</a>, it was a lot of pain for a poor service.</p>

<p>On the other hand, <strong>rbenv</strong> is really simple and powerful, but it only manages rubies, not gems. But again, we have <strong>Bundler</strong>, so it&#8217;s all that we need.</p>

<p>I will not say that using <strong>rbenv</strong> on a production server is painless, you still have to do some work to load some rbenv-things in your environment, but it&#8217;s a lot more clear and easy than with <strong>RVM</strong>&#8230;</p>

<h2>Uninstall RVM</h2>

<p>Start with the RVM auto-uninstall command:</p>

<pre><code>rvm implode
</code></pre>

<p>Check your filesystem for other <code>rvm</code> files which may remain: <code>.rvmrc</code> files, maybe <code>/etc/rvmrc</code>. Use <code>find / -name 'rvm' -print</code> or <code>locate rvm</code> for example.</p>

<h2>Install rbenv with ruby-build plugin</h2>

<p>Install <strong>rbenv</strong> by following <a href="https://github.com/sstephenson/rbenv#section_2.1">the project&#8217;s installation tutorial using GitHub checkout</a>. <strong>Read the following before doing the install!</strong></p>

<p>Be sure to adjust the file to which you append your environments changes (steps 2 and 3) to the one your using on your system (<code>.bash_profile</code> in the tutorial, <code>.profile</code> on my Mac system, but you may have <code>.bashrc</code> too).</p>

<p><strong>Stop at the end of step 3</strong>, <strong>restart your term</strong> (close and reopen, sure to work while step 4 <code>exec $SHELL</code> did nothing for me) and do the following to have a simple way of installing rubies:</p>

<pre><code>$ mkdir -p ~/.rbenv/plugins
$ cd ~/.rbenv/plugins
$ git clone git://github.com/sstephenson/ruby-build.git
</code></pre>

<p>If you&#8217;ve done this after step 4, you can just use this command to install the ruby you need, e.g. <code>1.9.2-p290</code>:</p>

<pre><code>rbenv install 1.9.2-p290
</code></pre>

<p>Don&#8217;t forget to do step 6, <code>rbenv rehash</code>.</p>

<h2>Define rbenv&#8217;s default ruby</h2>

<p>Create the <code>~/.rbenv/default</code> file with the following content, adjusted to your desired ruby:</p>

<pre><code>ruby-1.9.2-p290
</code></pre>

<h2>Configure Bundler to manage gemsets</h2>

<p>As a replacement to <strong>RVM</strong>&#8217;s gemsets feature, we will use <strong>Bundler</strong>. We will thus ask it to systematically install the gems inside the project&#8217;s <code>vendor/bundle</code> directory, instead of using the system&#8217;s default path.</p>

<p>To do this, create the <code>~/.bundle/config</code> file and add this content:</p>

<pre><code>---
   BUNDLE_PATH: vendor/bundle
</code></pre>

<p>You can check the configuration is OK by <code>cd</code>-ing into one of your projects&#8217; directory (assuming it&#8217;s using <strong>Bundle</strong> and so you have a <strong>Gemfile</strong>), and running <code>bundle config</code>. If the configuration is OK, you should have this showed:</p>

<pre><code>path
  Set for the current user (/Users/&lt;your_name&gt;/.bundle/config): "vendor/bundle"
</code></pre>

<h2>Using (and aliasing) bundle exec</h2>

<p>Using Bundler to manage your gemsets will now require you to use <code>bundle exec</code> for <strong>every</strong> ruby command you run, even <code>rails server</code> or <code>rails console</code> (they don&#8217;t need <code>bundle exec</code> to load Bundle, however you need Bundler to find them!).</p>

<p>A nice thing to do is to alias the <code>bundle exec</code> command to something shorter. I use <code>be</code>. Add this to your <code>~/.bash_profile</code>, <code>~/.profile</code> or whatever file you use:</p>

<pre><code>alias be='bundle exec'
</code></pre>

<p>So now you can run: <code>be rails console</code> instead of <code>bundle exec rails console</code>.</p>

<h2>The end</h2>

<p>That&#8217;s it, you&#8217;re done!</p>

<h2>References / credits</h2>

<p>This walkthrough is based on <a href="http://snippets.aktagon.com/snippets/532-How-to-migrate-from-rvm-to-rbenv">this article</a> I used a lot myself, but I finally rewrote it to include some more details on the <strong>rbenv</strong> installation process.</p>

<h2>Hubticle tags</h2>

<p>ruby, RVM, rbenv, gem, gemset, development, environment, bundle</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding SSL on some pages of your Rails application]]></title>
    <link href="http://www.softr.li/blog/2012/03/23/adding-ssl-on-some-pages-of-your-rails-application/"/>
    <updated>2012-03-23T09:49:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/03/23/adding-ssl-on-some-pages-of-your-rails-application</id>
    <content type="html"><![CDATA[<p>This tutorial should help you to setup SSL on your <em>staging</em> and <em>production</em> servers as well as update your Rails application to require SSL for specific controller actions.</p>

<!-- more -->


<h2>Generate a self-signed certificate to test on your staging server</h2>

<p>We start by creating a self-signed certificate you will be able to use on your test/staging server, before buying a real certificate and configuring your production machine with it.</p>

<p><em>On your server console</em></p>

<pre><code>openssl genrsa -aes256 -out server.key 2048
openssl req -new -key server.key -out server.csr
openssl rsa -in server.key.bak -out server.key
sudo openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</code></pre>

<p>What does it do?</p>

<ul>
<li>Generates a private/public key pair</li>
<li>Creates a certificate request

<ul>
<li>You <strong>must</strong> fill every requested field unless it is marked optional.</li>
<li>In France, you should use the name of the &#8220;departement&#8221; to fill the <em>State or Province Name</em>.</li>
<li>Use your company name for <em>Organization Name</em>.</li>
<li>Be sure to fill the chosen website URL for <em>Common Name</em>. <strong>Don&#8217;t fill your personal name for a website SSL certificate request!</strong></li>
</ul>
</li>
<li>Removed the passphrase from the private key. You have to do this, so that it won&#8217;t be needed when starting the webserver. Since this is probably done automatically (at server boot or through automatic management tools), you won&#8217;t be there to enter the passphrase. <strong>Be sure however that your private key is secure (root user access only), and revoke it as soon as you think it was stolen.</strong></li>
<li>Generates the certificate.</li>
</ul>


<h2>Move the files to the correct place</h2>

<pre><code>sudo mv server.crt /etc/ssl/application_name.crt
sudo mv server.key /etc/ssl/private/application_name.key
</code></pre>

<h2>Change the permissions of the files to make them safe</h2>

<pre><code>sudo chown root:ssl-cert /etc/ssl/private/application_name.key
sudo chmod 0600 /etc/ssl/private/application_name.key
sudo chmod 0600 /etc/ssl/certs/application_name.crt 
sudo chown root:ssl-cert /etc/ssl/certs/application_name.crt 
</code></pre>

<h2>Update the configuration of your webserver to add a SSL host</h2>

<p><em>This tutorial is written for nginx v0.7.65. It&#8217;s quite old but it&#8217;s the default package on Ubuntu 10.04.3 LTS. I however recommend you to update it by installing it directly from the source, it&#8217;s quite easy!</em></p>

<p>Adding the SSL host to your nginx configuration file essentially means to add the following lines:</p>

<pre><code>server {
    listen &lt;%= app_port_ssl %&gt;;
    client_max_body_size 500M;
    server_name &lt;%= server_name %&gt;;
    ssl                     on;
    ssl_certificate         /etc/ssl/certs/application_name.crt;
    ssl_certificate_key     /etc/ssl/private/application_name.key;
    ssl_session_timeout     5m;

    [...remaining configuration]
}
</code></pre>

<p>You have to make some changes for the location you&#8217;re proxying to Rails too.</p>

<p>In our case, we have this root location:</p>

<pre><code>location / {
  # Returns file if it exists, else send to app server's location
  try_files $uri @app_server;
}
</code></pre>

<p>Our standard (ie. HTTP) <code>@app_server</code> location is defined like this:</p>

<pre><code>location @app_server {
  proxy_set_header X-Forwarded-For$proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_pass http://&lt;%= application %&gt;_app_server;
}
</code></pre>

<p>The one for SSL is like this:</p>

<pre><code>location @app_server {
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto https;
  proxy_set_header Host $http_host;
  proxy_pass http://&lt;%= application %&gt;_app_server;
  proxy_redirect off;
  proxy_max_temp_file_size 0;
}
</code></pre>

<p>You see some additional proxy directives, in particular <code>proxy_set_header X-Forwarded-Proto https;</code>, they ensure that Rails can correctly detect the request was made through HTTPS, not HTTP.</p>

<p>The remaining configuration may be a copy of your HTTP server configuration, in which case your server will do both HTTP and HTTPS the same way, or a specific configuration if you want to process different locations, perform redirections, etc.</p>

<h2>Update Rails application to require SSL for specific actions</h2>

<p>Our goal is to have only specific controller actions requiring SSL. We don&#8217;t want everything to be secured, this would unnecessarily increase our server&#8217;s load.</p>

<p>We assume that our webserver-level configuration (nginx in our case) is not managing HTTP/HTTPS routing (we could do this through webserver rules, however we consider that this is business/app-level related, so this should be done at app-level).</p>

<p><em>This tutorial is made for Rails 3.0.x (tested with 3.0.12)</em></p>

<h3>Install <code>ssl_requirement</code> gem</h3>

<p>Use this fork: <a href="https://github.com/bartt/ssl_requirement">https://github.com/bartt/ssl_requirement</a> and follow the guide.</p>

<p><strong>If you want the short way&#8230;</strong></p>

<p>Add to your Gemfile</p>

<pre><code>gem 'bartt-ssl_requirement', '~&gt;1.4.0', :require =&gt; 'ssl_requirement'
</code></pre>

<h3>Configure Devise for SSL</h3>

<p>Add the following code at the bottom of your <code>Application</code> class definition within <code>config/application.rb</code>:</p>

<pre><code>config.to_prepare do
  Devise::RegistrationsController.ssl_required :new, :create
  Devise::SessionsController.ssl_required :new, :create
end
</code></pre>

<p>Add to your <code>ApplicationController</code></p>

<pre><code>include ::SslRequirement
</code></pre>

<p>For any other controller action you want SSL, add this  to your controller class:</p>

<pre><code>ssl_required :action_name
</code></pre>

<h3>Review routes when SSL is required</h3>

<p>You probably don&#8217;t want to limit all your secured routes to SSL. In most cases, it&#8217;s better if you don&#8217;t, so that the user gets a redirection when he tries to access through <code>http</code> a route with ssl required.</p>

<p>However, you can&#8217;t do so for <code>POST</code> routes: redirection won&#8217;t work, since it will redirect to a <code>GET</code>. For these routes, you can add the SSL constraint on the route, so that the user get a <code>404</code> error when he tries to mess with the URL&#8217;s protocol!</p>

<p>If you&#8217;re using Devise, you&#8217;ll probably want to do this for you <code>user_registration</code> and <code>user_session</code> <code>POST</code> routes.</p>

<p>You will have to override Devise&#8217;s defaults routes for <code>sessions</code> and <code>registrations</code> controllers. For the override, you&#8217;ll use:</p>

<pre><code>devise_for  :users, 
  :skip =&gt; [:registrations, :sessions]
</code></pre>

<p>This simply tells Devise to skip the registrations and sessions routes, as you&#8217;ll give them yourself to enforce the SSL requirement.</p>

<p>And now, you create these routes by yourself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">devise_scope</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scope</span> <span class="s1">&#39;/users&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Setting up registrations routes manually for https on create</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/cancel&#39;</span><span class="p">,</span>        <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#cancel&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:cancel_user_registration</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>              <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#create&#39;</span><span class="p">,</span>
</span><span class='line'>                          <span class="ss">:constraints</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:protocol</span> <span class="o">=&gt;</span> <span class="n">secured_protocol</span> <span class="p">},</span>
</span><span class='line'>                          <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_registration</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/sign_up&#39;</span><span class="p">,</span>       <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#new&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:new_user_registration</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/edit&#39;</span><span class="p">,</span>          <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#edit&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:edit_user_registration</span>
</span><span class='line'>    <span class="n">put</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>               <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#update&#39;</span>
</span><span class='line'>    <span class="n">delete</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>            <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/registrations#destroy&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Sessions routes for https on create</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/sign_in&#39;</span><span class="p">,</span>       <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/sessions#new&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:new_user_session</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;/sign_in&#39;</span><span class="p">,</span>      <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/sessions#create&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_session</span><span class="p">,</span>
</span><span class='line'>                          <span class="ss">:constraints</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:protocol</span> <span class="o">=&gt;</span> <span class="n">secured_protocol</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">delete</span> <span class="s1">&#39;/sign_out&#39;</span><span class="p">,</span>   <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/sessions#destroy&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:destroy_user_session</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Change your links to go <code>https</code></h2>

<p>This involves using the <code>_url</code> helper instead of the <code>_path</code> one, and adding this option: <code>:protocol =&gt; "https"</code>.</p>

<p>Be sure to change the url of forms matching SSL-enabled routes, or you&#8217;ll get <code>404</code>s!</p>

<h2>Test</h2>

<p>You should now be able to test this configuration with your browser. You will need to deploy your updated app to a staging machine, unless your development is SSL-capable.</p>

<p>You may encounter some issues with your browser recognizing the issued certificate. The browser may complain it is signed by an unknown authority. This may happen when an unknown intermediate certification authority is used. In this case, you have to modify your certificate file to include the complete chain of certificates. Be sure to insert the certificates from the chain <strong>above</strong> your site&#8217;s certificate!</p>

<p>An example line to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cat</span> <span class="n">bundled_certificate_chain</span><span class="o">.</span><span class="n">crt</span> <span class="o">&gt;&gt;</span> <span class="n">server</span><span class="o">.</span><span class="n">crt</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use this service to check your server is sending the expected certificate chain: <a href="http://www.sslshopper.com/ssl-checker.html">http://www.sslshopper.com/ssl-checker.html</a></p>

<h2>References</h2>

<ul>
<li><a href="http://wiki.nginx.org/HttpSslModule">http://wiki.nginx.org/HttpSslModule</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the correct object data model for really automatic CoreData lightweight migrations]]></title>
    <link href="http://www.softr.li/blog/2012/01/17/getting-the-correct-object-data-model-for-really-automatic-coredata-lightweight-migration/"/>
    <updated>2012-01-17T09:31:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/01/17/getting-the-correct-object-data-model-for-really-automatic-coredata-lightweight-migration</id>
    <content type="html"><![CDATA[<p>If you&#8217;re using CoreData for your iOS application, you may have the need sometimes <strong>to update your data model</strong>. If your application is already live (e.g. shipped on the AppStore), you will have to <strong>migrate your existing data when updating the model</strong>.</p>

<!-- more -->


<h2>Lightweight migration</h2>

<p>As long as your migration is not too complicated, <strong>CoreData provides a simple way to do this</strong>, using what they call the <strong>lightweight migration process</strong>. This process is not-that-bad documented in Apple documentation&#8217;s <em>(ref 1)</em>, but&#8230; there is a piece of code lacking, and making the whole thing &#8220;automatic&#8221; was not so easy&#8230;</p>

<h2>Automatic migration</h2>

<p>The automatic-nature of the process is given by the creation of a new version of your Data Model in XCode, and telling it which version is the current one (see <em>ref 2</em> for Apple&#8217;s documentation on this matter).</p>

<p>Now that you&#8217;ve created your second version, you may want to use documentation&#8217;s code sample to build your lightweight migration process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">The</span> <span class="n">URL</span> <span class="n">of</span> <span class="n">a</span> <span class="n">persistent</span> <span class="n">store</span><span class="err">#</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">psc</span> <span class="o">=</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">The</span> <span class="n">coordinator</span><span class="err">#</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">psc</span> <span class="nl">addPersistentStoreWithType:</span><span class="o">&lt;</span><span class="err">#</span><span class="n">Store</span> <span class="n">type</span><span class="err">#</span><span class="o">&gt;</span> <span class="nl">configuration:</span><span class="o">&lt;</span><span class="err">#</span><span class="n">Configuration</span> <span class="n">or</span> <span class="nb">nil</span><span class="err">#</span><span class="o">&gt;</span> <span class="nl">URL:</span><span class="n">storeURL</span> <span class="nl">options:</span><span class="n">options</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Handle the error.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this stage, most of us already have a way of getting the <code>NSManagedObjectModel</code> instance required to build a <code>NSPersistentCoordinator</code> instance. This generally involves this code (often put in the application&#8217;s delegate):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="n">managedObjectModel</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">managedObjectModel</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">managedObjectModel</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="nl">mergedModelFromBundles:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The issue with this is that you&#8217;re gonna get a &#8221;<code>Can't merge models with two different entities named 'EntityName'</code>&#8221; exception, because you&#8217;re in fact merging the two versions of your model&#8230; <strong>And here broke the automaticity!</strong></p>

<p>You indeed can&#8217;t merge your two model versions. What you want is your current model version to get loaded into the <code>NSPersistentStoreCoordinator</code>. Here you have two choices:</p>

<ol>
<li>Everything I could find on the web was giving me a solution requiring to manually enter the name of the new model version so that I could load the correct model version. But hey! I&#8217;m telling XCode what the current version is, shouldn&#8217;t it be enough?</li>
<li>Your second solution, the truly automatic one is here, just one line away&#8230;</li>
</ol>


<figure class='code'><figcaption><span>Load the current NSManagedObjectModel using XCode generated VersionInfo property list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="n">currentManagedObjectModel</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Find and open the .plist file with the current version name</span>
</span><span class='line'>  <span class="c1">// Path to the plist (in the application bundle)</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">pathToDataModelVersionInfoPlist</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;VersionInfo&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;plist&quot;</span> <span class="nl">inDirectory:</span><span class="s">@&quot;DataModel.momd&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dataModelVersionInfo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfFile:</span><span class="n">pathToDataModelVersionInfoPlist</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">currentModelName</span> <span class="o">=</span> <span class="p">[</span><span class="n">dataModelVersionInfo</span> <span class="nl">objectForKey:</span><span class="s">@&quot;NSManagedObjectModel_CurrentVersionName&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">modelPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="n">currentModelName</span> <span class="nl">ofType:</span><span class="s">@&quot;mom&quot;</span> <span class="nl">inDirectory:</span><span class="s">@&quot;DataModel.momd&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">modelURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">modelPath</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">modelURL</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this small piece of code, you will read the <code>VersionInfo.plist</code> file maintained by XCode which contains the reference to the current data model. So now, each time you set a new data model version, it will get chosen automatically and migrated without having to update you code!</p>

<p><strong>NB: This has not been tested a lot.</strong> It works with iOS 5 and should be tested on different versions before releasing any code using this trick. It is dependent on a file built and added to the bundle by XCode, so you may have to check with updates that it is not changed or removed.</p>

<h2>iOS documentation references</h2>

<ol>
<li>iOS x.x Library > Data Management > Core Data Model Versioning and Data Migration Programming Guide > Lightweight Migration</li>
<li>iOS x.x Library > Data Management > Core Data Model Versioning and Data Migration Programming Guide > Versioning > Model Versions</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using cloned virtualized machines but having issues with your network configuration?]]></title>
    <link href="http://www.softr.li/blog/2012/01/05/using-cloned-virtualized-machines-but-having-issues-with-your-network-configuration/"/>
    <updated>2012-01-05T09:18:00+01:00</updated>
    <id>http://www.softr.li/blog/2012/01/05/using-cloned-virtualized-machines-but-having-issues-with-your-network-configuration</id>
    <content type="html"><![CDATA[<p>Trying to get your cloned VirtualBox on the host network without success? This may help you&#8230;</p>

<!-- more -->


<p>If like me, you&#8217;re using <strong>VirtualBox virtual machines</strong> a lot, eg.:</p>

<ul>
<li>to <strong>simulate your production environment</strong> (what we may call <em>staging</em>),</li>
<li>or more lately in my case, to <strong>run a PostgreSQL database</strong> and thus stop using SQLite to do your Rails developments and just use the production&#8217;s server&#8230;</li>
</ul>


<p>&#8230;then you may have wanted to clone some of your virtual machines once you installed the barebone server, and you may thus have faced <strong>an issue with the network of the cloned machine not working anymore.</strong></p>

<p><strong>The solution to the problem is quite simple, but it needs to be found!</strong></p>

<p>This one is working well with my images under <strong> Ubuntu 10.04.3 LTS</strong>. You can find some help <a href="http://blog.computerant.com/2010/01/02/virtualbox-cloning-ubuntu/">on this other post</a>, or if you want the shortest way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv /etc/udev/rules.d/70-persistent-net.rules /etc/udev/rules.d/70-persistent-net.rules.broken
</span><span class='line'>sudo shutdown now -r</span></code></pre></td></tr></table></div></figure>


<p>This should restart your machine&#8230; and restore your network! Have fun ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with custom table view cells defined in NIB files]]></title>
    <link href="http://www.softr.li/blog/2011/09/14/working-with-custom-table-view-cells-defined-in-nib-files/"/>
    <updated>2011-09-14T08:59:00+02:00</updated>
    <id>http://www.softr.li/blog/2011/09/14/working-with-custom-table-view-cells-defined-in-nib-files</id>
    <content type="html"><![CDATA[<p>If you&#8217;re using custom table view cells defined within NIB/XIB files for your iOS application, and you&#8217;re a beginner like me, you may do one of these two mistakes. Just find out what not to do by having a look at this article!</p>

<!-- more -->


<p></p>

<h2>Context</h2>

<p>One of the projects I&#8217;m currently working on involves displaying custom UITableViewCells. To be exact, I display a dynamic list of elements which can be either displayed by a <code>UITableViewCell</code> <strong>A</strong> or a <code>UITableViewCell</code> <strong>B</strong>. Each of these cells is defined in its own NIB file.</p>

<ul>
<li>Cell A has 3 subviews: 2 labels and a progress view.</li>
<li>Cell B has only 1 subview, the label.</li>
</ul>


<h2>My first mistake was to try using IBOutlets to update the cell&#8217;s content.</h2>

<p>I have a subclass of <code>UITableViewController</code> which will load the cells&#8217; NIB files when needed (from <code>UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</code> - you can have a look at the &#8220;A Closer Look at Table-View Cells&#8221; documentation page for more information).</p>

<p>In the cell&#8217;s NIB, I have set the File&#8217;s Owner as my subclass of <code>UITableViewController</code>. I setup an outlet to link to the cell so I have a reference when I load it in my table view controller. However <strong>I also wanted to use IBOutlets to link to the cell&#8217;s subviews&#8230; This is a bad idea.</strong> This lead to some bizarre side-effects when displaying the table view, such as some rows replacing others when scrolling.</p>

<p>If you have subviews in your custom cell you want to update (if you don&#8217;t, I&#8217;m not sure I understand how you&#8217;re using your cells&#8230;), <strong>follow the documentation and use the tag value of your subviews when editing the NIB file</strong>. From your controller, you can access them with <code>[cell viewForTag:(NSInteger)tag]</code>.</p>

<h2>My second mistake was to use &#8216;0&#8217; as a tag.</h2>

<p>One last thing. Even if I did not read it in the documentation, maybe <strong>you should not use &#8216;0&#8217; as a tag</strong>. I was using it for one of my subview and only the subview tagged &#8216;0&#8217; was displayed, the other disappeared. So just change the tag from the default value, and start with &#8216;1&#8217;.</p>
]]></content>
  </entry>
  
</feed>
